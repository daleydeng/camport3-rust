/* automatically generated by rust-bindgen 0.71.0 */

pub const TY_LIB_VERSION_MAJOR: u32 = 3;
pub const TY_LIB_VERSION_MINOR: u32 = 6;
pub const TY_LIB_VERSION_PATCH: u32 = 66;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub mod TY_STATUS_LIST {
    #[doc = "@brief API call return status"]
    pub type Type = i32;
    pub const TY_STATUS_OK: Type = 0;
    pub const TY_STATUS_ERROR: Type = -1001;
    pub const TY_STATUS_NOT_INITED: Type = -1002;
    pub const TY_STATUS_NOT_IMPLEMENTED: Type = -1003;
    pub const TY_STATUS_NOT_PERMITTED: Type = -1004;
    pub const TY_STATUS_DEVICE_ERROR: Type = -1005;
    pub const TY_STATUS_INVALID_PARAMETER: Type = -1006;
    pub const TY_STATUS_INVALID_HANDLE: Type = -1007;
    pub const TY_STATUS_INVALID_COMPONENT: Type = -1008;
    pub const TY_STATUS_INVALID_FEATURE: Type = -1009;
    pub const TY_STATUS_WRONG_TYPE: Type = -1010;
    pub const TY_STATUS_WRONG_SIZE: Type = -1011;
    pub const TY_STATUS_OUT_OF_MEMORY: Type = -1012;
    pub const TY_STATUS_OUT_OF_RANGE: Type = -1013;
    pub const TY_STATUS_TIMEOUT: Type = -1014;
    pub const TY_STATUS_WRONG_MODE: Type = -1015;
    pub const TY_STATUS_BUSY: Type = -1016;
    pub const TY_STATUS_IDLE: Type = -1017;
    pub const TY_STATUS_NO_DATA: Type = -1018;
    pub const TY_STATUS_NO_BUFFER: Type = -1019;
    pub const TY_STATUS_NULL_POINTER: Type = -1020;
    pub const TY_STATUS_READONLY_FEATURE: Type = -1021;
    pub const TY_STATUS_INVALID_DESCRIPTOR: Type = -1022;
    pub const TY_STATUS_INVALID_INTERFACE: Type = -1023;
    pub const TY_STATUS_FIRMWARE_ERROR: Type = -1024;
    pub const TY_STATUS_DEV_EPERM: Type = -1;
    pub const TY_STATUS_DEV_EIO: Type = -5;
    pub const TY_STATUS_DEV_ENOMEM: Type = -12;
    pub const TY_STATUS_DEV_EBUSY: Type = -16;
    pub const TY_STATUS_DEV_EINVAL: Type = -22;
}
pub type TY_STATUS = i32;
pub mod TY_FW_ERRORCODE_LIST {
    pub type Type = u32;
    pub const TY_FW_ERRORCODE_CAM0_NOT_DETECTED: Type = 1;
    pub const TY_FW_ERRORCODE_CAM1_NOT_DETECTED: Type = 2;
    pub const TY_FW_ERRORCODE_CAM2_NOT_DETECTED: Type = 4;
    pub const TY_FW_ERRORCODE_POE_NOT_INIT: Type = 8;
    pub const TY_FW_ERRORCODE_RECMAP_NOT_CORRECT: Type = 16;
    pub const TY_FW_ERRORCODE_LOOKUPTABLE_NOT_CORRECT: Type = 32;
    pub const TY_FW_ERRORCODE_DRV8899_NOT_INIT: Type = 64;
    pub const TY_FW_ERRORCODE_FOC_START_ERR: Type = 128;
    pub const TY_FW_ERRORCODE_CONFIG_NOT_FOUND: Type = 65536;
    pub const TY_FW_ERRORCODE_CONFIG_NOT_CORRECT: Type = 131072;
    pub const TY_FW_ERRORCODE_XML_NOT_FOUND: Type = 262144;
    pub const TY_FW_ERRORCODE_XML_NOT_CORRECT: Type = 524288;
    pub const TY_FW_ERRORCODE_XML_OVERRIDE_FAILED: Type = 1048576;
    pub const TY_FW_ERRORCODE_CAM_INIT_FAILED: Type = 2097152;
    pub const TY_FW_ERRORCODE_LASER_INIT_FAILED: Type = 4194304;
}
pub type TY_FW_ERRORCODE = u32;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_EVENT_LIST {
    TY_EVENT_DEVICE_OFFLINE = -2001,
    TY_EVENT_LICENSE_ERROR = -2002,
    TY_EVENT_FW_INIT_ERROR = -2003,
}
pub use self::TY_EVENT_LIST as TY_ENENT_LIST;
pub type TY_EVENT = i32;
pub type TY_INTERFACE_HANDLE = *mut ::std::os::raw::c_void;
pub type TY_DEV_HANDLE = *mut ::std::os::raw::c_void;
impl TY_DEVICE_COMPONENT_LIST {
    pub const TY_COMPONENT_RGB_CAM: TY_DEVICE_COMPONENT_LIST =
        TY_DEVICE_COMPONENT_LIST::TY_COMPONENT_RGB_CAM_LEFT;
}
#[repr(u32)]
#[doc = "@breif  Device Component list\n A device contains several component.\n Each component can be controlled by its own features, such as image width, exposure time, etc..\n@see To Know how to get feature information please refer to sample code DumpAllFeatures"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_DEVICE_COMPONENT_LIST {
    #[doc = "< Abstract component stands for whole device, always enabled"]
    TY_COMPONENT_DEVICE = 2147483648,
    #[doc = "< Depth camera"]
    TY_COMPONENT_DEPTH_CAM = 65536,
    #[doc = "< Left IR camera"]
    TY_COMPONENT_IR_CAM_LEFT = 262144,
    #[doc = "< Right IR camera"]
    TY_COMPONENT_IR_CAM_RIGHT = 524288,
    #[doc = "< Left RGB camera"]
    TY_COMPONENT_RGB_CAM_LEFT = 1048576,
    #[doc = "< Right RGB camera"]
    TY_COMPONENT_RGB_CAM_RIGHT = 2097152,
    #[doc = "< Laser"]
    TY_COMPONENT_LASER = 4194304,
    #[doc = "< Inertial Measurement Unit"]
    TY_COMPONENT_IMU = 8388608,
    #[doc = "< virtual component for brightness histogram of ir"]
    TY_COMPONENT_BRIGHT_HISTO = 16777216,
    #[doc = "< virtual component for device storage"]
    TY_COMPONENT_STORAGE = 33554432,
}
pub type TY_COMPONENT_ID = u32;
#[repr(u32)]
#[doc = "Feature Format Type definitions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_FEATURE_TYPE_LIST {
    TY_FEATURE_INT = 4096,
    TY_FEATURE_FLOAT = 8192,
    TY_FEATURE_ENUM = 12288,
    TY_FEATURE_BOOL = 16384,
    TY_FEATURE_STRING = 20480,
    TY_FEATURE_BYTEARRAY = 24576,
    TY_FEATURE_STRUCT = 28672,
}
pub type TY_FEATURE_TYPE = u32;
impl TY_FEATURE_ID_LIST {
    pub const TY_FOC_CALIB_START: TY_FEATURE_ID_LIST =
        TY_FEATURE_ID_LIST::TY_INT_RGB_FLASHLIGHT_INTENSITY;
}
#[repr(u32)]
#[doc = "feature for component definitions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_FEATURE_ID_LIST {
    #[doc = "< see TY_CAMERA_INTRINSIC"]
    TY_STRUCT_CAM_INTRINSIC = 28672,
    #[doc = "< extrinsic between  depth cam and current component , see TY_CAMERA_EXTRINSIC"]
    TY_STRUCT_EXTRINSIC_TO_DEPTH = 28673,
    #[doc = "< extrinsic between  left IR and current compoent, see TY_CAMERA_EXTRINSIC"]
    TY_STRUCT_EXTRINSIC_TO_IR_LEFT = 28674,
    #[doc = "< see TY_CAMERA_DISTORTION"]
    TY_STRUCT_CAM_DISTORTION = 28678,
    #[doc = "< see TY_CAMERA_CALIB_INFO"]
    TY_STRUCT_CAM_CALIB_DATA = 28679,
    #[doc = "< the rectified intrinsic. see TY_CAMERA_INTRINSIC"]
    TY_STRUCT_CAM_RECTIFIED_INTRI = 28680,
    #[doc = "< used for reading/writing custom block"]
    TY_BYTEARRAY_CUSTOM_BLOCK = 24586,
    #[doc = "< used for reading/writing fpn block"]
    TY_BYTEARRAY_ISP_BLOCK = 24587,
    TY_INT_PERSISTENT_IP = 4112,
    TY_INT_PERSISTENT_SUBMASK = 4113,
    TY_INT_PERSISTENT_GATEWAY = 4114,
    TY_BOOL_GVSP_RESEND = 16403,
    #[doc = "< microseconds"]
    TY_INT_PACKET_DELAY = 4116,
    TY_INT_ACCEPTABLE_PERCENT = 4117,
    #[doc = "< Ntp server IP"]
    TY_INT_NTP_SERVER_IP = 4118,
    TY_INT_PACKET_SIZE = 4119,
    #[doc = "< milliseconds"]
    TY_INT_LINK_CMD_TIMEOUT = 4120,
    #[doc = "< statistical information, see TY_CAMERA_STATISTICS"]
    TY_STRUCT_CAM_STATISTICS = 28927,
    TY_INT_WIDTH_MAX = 4352,
    TY_INT_HEIGHT_MAX = 4353,
    TY_INT_OFFSET_X = 4354,
    TY_INT_OFFSET_Y = 4355,
    #[doc = "< Image width"]
    TY_INT_WIDTH = 4356,
    #[doc = "< Image height"]
    TY_INT_HEIGHT = 4357,
    #[doc = "< Resolution-PixelFromat mode, see TY_IMAGE_MODE_LIST"]
    TY_ENUM_IMAGE_MODE = 12553,
    #[doc = "@brief scale unit\ndepth image is uint16 pixel format with default millimeter unit ,for some device  can output Sub-millimeter accuracy data\nthe acutal depth (mm)= PixelValue * ScaleUnit"]
    TY_FLOAT_SCALE_UNIT = 8458,
    #[doc = "< Trigger POL, see TY_TRIGGER_POL_LIST"]
    TY_ENUM_TRIGGER_POL = 12801,
    #[doc = "< Number of frames captured per trigger"]
    TY_INT_FRAME_PER_TRIGGER = 4610,
    #[doc = "< param of trigger, see TY_TRIGGER_PARAM"]
    TY_STRUCT_TRIGGER_PARAM = 29987,
    #[doc = "< param of trigger, see TY_TRIGGER_PARAM_EX"]
    TY_STRUCT_TRIGGER_PARAM_EX = 29989,
    #[doc = "< param of trigger mode 20, see TY_TRIGGER_TIMER_LIST"]
    TY_STRUCT_TRIGGER_TIMER_LIST = 29990,
    #[doc = "< param of trigger mode 21, see TY_TRIGGER_TIMER_PERIOD"]
    TY_STRUCT_TRIGGER_TIMER_PERIOD = 29991,
    #[doc = "< Keep Alive switch"]
    TY_BOOL_KEEP_ALIVE_ONOFF = 16899,
    #[doc = "< Keep Alive timeout"]
    TY_INT_KEEP_ALIVE_TIMEOUT = 4612,
    #[doc = "< Cmos sync switch"]
    TY_BOOL_CMOS_SYNC = 16901,
    #[doc = "< Trigger delay time, in microseconds"]
    TY_INT_TRIGGER_DELAY_US = 4614,
    #[doc = "< Trigger out IO"]
    TY_BOOL_TRIGGER_OUT_IO = 16903,
    #[doc = "< Trigger duration time, in microseconds"]
    TY_INT_TRIGGER_DURATION_US = 4616,
    #[doc = "< stream async switch, see TY_STREAM_ASYNC_MODE"]
    TY_ENUM_STREAM_ASYNC = 12809,
    #[doc = "< capture time in multi-ir"]
    TY_INT_CAPTURE_TIME_US = 4624,
    #[doc = "< see TY_TIME_SYNC_TYPE"]
    TY_ENUM_TIME_SYNC_TYPE = 12817,
    #[doc = "< time sync done status"]
    TY_BOOL_TIME_SYNC_READY = 16914,
    #[doc = "< Enable switch for floodlight used in ir component"]
    TY_BOOL_IR_FLASHLIGHT = 16915,
    #[doc = "< ir component flashlight intensity level"]
    TY_INT_IR_FLASHLIGHT_INTENSITY = 4628,
    #[doc = "< Enable switch for floodlight used in rgb component"]
    TY_BOOL_RGB_FLASHLIGHT = 16929,
    #[doc = "< rgb component flashlight intensity level"]
    TY_INT_RGB_FLASHLIGHT_INTENSITY = 4642,
    #[doc = "< DO_0 workmode, see TY_DO_WORKMODE"]
    TY_STRUCT_DO0_WORKMODE = 29205,
    #[doc = "< DI_0 workmode, see TY_DI_WORKMODE"]
    TY_STRUCT_DI0_WORKMODE = 29206,
    #[doc = "< DO_1 workmode, see TY_DO_WORKMODE"]
    TY_STRUCT_DO1_WORKMODE = 29207,
    #[doc = "< DI_1 workmode, see TY_DI_WORKMODE"]
    TY_STRUCT_DI1_WORKMODE = 29208,
    #[doc = "< DO_2 workmode, see TY_DO_WORKMODE"]
    TY_STRUCT_DO2_WORKMODE = 29209,
    #[doc = "< DI_2 workmode, see TY_DI_WORKMODE"]
    TY_STRUCT_DI2_WORKMODE = 29216,
    TY_ENUM_CONFIG_MODE = 12833,
    #[doc = "< Auto exposure switch"]
    TY_BOOL_AUTO_EXPOSURE = 17152,
    #[doc = "< Exposure time"]
    TY_INT_EXPOSURE_TIME = 4865,
    #[doc = "< Auto gain switch"]
    TY_BOOL_AUTO_GAIN = 17154,
    #[doc = "< Sensor Gain"]
    TY_INT_GAIN = 4867,
    #[doc = "< Auto white balance"]
    TY_BOOL_AUTO_AWB = 17156,
    #[doc = "< region of aec statistics, see TY_AEC_ROI_PARAM"]
    TY_STRUCT_AEC_ROI = 29445,
    #[doc = "< tof sensor hdr ratio for depth"]
    TY_INT_TOF_HDR_RATIO = 4870,
    #[doc = "< tof jitter threshold for depth"]
    TY_INT_TOF_JITTER_THRESHOLD = 4871,
    #[doc = "< Laser power level"]
    TY_INT_LASER_POWER = 5376,
    #[doc = "< Laser auto ctrl"]
    TY_BOOL_LASER_AUTO_CTRL = 17665,
    TY_STRUCT_LASER_PATTERN = 29954,
    TY_INT_LASER_CAM_TRIG_POS = 5379,
    TY_INT_LASER_CAM_TRIG_LEN = 5380,
    TY_INT_LASER_LUT_TRIG_POS = 5381,
    TY_INT_LASER_LUT_NUM = 5382,
    TY_INT_LASER_PATTERN_OFFSET = 5383,
    TY_INT_LASER_MIRROR_NUM = 5384,
    TY_INT_LASER_MIRROR_SEL = 5385,
    TY_INT_LASER_LUT_IDX = 5386,
    TY_INT_LASER_FACET_IDX = 5387,
    TY_INT_LASER_FACET_POS = 5388,
    TY_INT_LASER_MODE = 5389,
    TY_INT_CONST_DRV_DUTY = 5390,
    #[doc = "< Laser enable by device index"]
    TY_STRUCT_LASER_ENABLE_BY_IDX = 30000,
    #[doc = "< Laser power by device index"]
    TY_STRUCT_LASER_POWER_BY_IDX = 30001,
    #[doc = "< Flood enable by device index"]
    TY_STRUCT_FLOOD_ENABLE_BY_IDX = 30002,
    #[doc = "< Flood power by device index"]
    TY_STRUCT_FLOOD_POWER_BY_IDX = 30003,
    #[doc = "< Output undistorted image"]
    TY_BOOL_UNDISTORTION = 17680,
    #[doc = "< Output bright histogram"]
    TY_BOOL_BRIGHTNESS_HISTOGRAM = 17681,
    #[doc = "< Do depth image postproc"]
    TY_BOOL_DEPTH_POSTPROC = 17682,
    #[doc = "< Gain of R channel"]
    TY_INT_R_GAIN = 5408,
    #[doc = "< Gain of G channel"]
    TY_INT_G_GAIN = 5409,
    #[doc = "< Gain of B channel"]
    TY_INT_B_GAIN = 5410,
    #[doc = "< Analog gain"]
    TY_INT_ANALOG_GAIN = 5412,
    #[doc = "< HDR func enable/disable"]
    TY_BOOL_HDR = 17701,
    #[doc = "< HDR parameters"]
    TY_BYTEARRAY_HDR_PARAMETER = 25894,
    TY_INT_AE_TARGET_Y = 5415,
    #[doc = "< IMU Data Onoff"]
    TY_BOOL_IMU_DATA_ONOFF = 17920,
    #[doc = "< IMU acc bias matrix, see TY_ACC_BIAS"]
    TY_STRUCT_IMU_ACC_BIAS = 30209,
    #[doc = "< IMU acc misalignment matrix, see TY_ACC_MISALIGNMENT"]
    TY_STRUCT_IMU_ACC_MISALIGNMENT = 30210,
    #[doc = "< IMU acc scale matrix, see TY_ACC_SCALE"]
    TY_STRUCT_IMU_ACC_SCALE = 30211,
    #[doc = "< IMU gyro bias matrix, see TY_GYRO_BIAS"]
    TY_STRUCT_IMU_GYRO_BIAS = 30212,
    #[doc = "< IMU gyro misalignment matrix, see TY_GYRO_MISALIGNMENT"]
    TY_STRUCT_IMU_GYRO_MISALIGNMENT = 30213,
    #[doc = "< IMU gyro scale matrix, see TY_GYRO_SCALE"]
    TY_STRUCT_IMU_GYRO_SCALE = 30214,
    #[doc = "< IMU camera to imu matrix, see TY_CAMERA_TO_IMU"]
    TY_STRUCT_IMU_CAM_TO_IMU = 30215,
    #[doc = "< IMU fps, see TY_IMU_FPS_LIST"]
    TY_ENUM_IMU_FPS = 13832,
    #[doc = "< SGBM image channel num"]
    TY_INT_SGBM_IMAGE_NUM = 5648,
    #[doc = "< SGBM disparity num"]
    TY_INT_SGBM_DISPARITY_NUM = 5649,
    #[doc = "< SGBM disparity offset"]
    TY_INT_SGBM_DISPARITY_OFFSET = 5650,
    #[doc = "< SGBM match window height"]
    TY_INT_SGBM_MATCH_WIN_HEIGHT = 5651,
    #[doc = "< SGBM semi global param p1"]
    TY_INT_SGBM_SEMI_PARAM_P1 = 5652,
    #[doc = "< SGBM semi global param p2"]
    TY_INT_SGBM_SEMI_PARAM_P2 = 5653,
    #[doc = "< SGBM uniqueness factor param"]
    TY_INT_SGBM_UNIQUE_FACTOR = 5654,
    #[doc = "< SGBM uniqueness min absolute diff"]
    TY_INT_SGBM_UNIQUE_ABSDIFF = 5655,
    #[doc = "< SGBM uniqueness max cost param"]
    TY_INT_SGBM_UNIQUE_MAX_COST = 5656,
    #[doc = "< SGBM enable half window size"]
    TY_BOOL_SGBM_HFILTER_HALF_WIN = 17945,
    #[doc = "< SGBM match window width"]
    TY_INT_SGBM_MATCH_WIN_WIDTH = 5658,
    #[doc = "< SGBM enable median filter"]
    TY_BOOL_SGBM_MEDFILTER = 17947,
    #[doc = "< SGBM enable left right consist check"]
    TY_BOOL_SGBM_LRC = 17948,
    #[doc = "< SGBM max diff"]
    TY_INT_SGBM_LRC_DIFF = 5661,
    #[doc = "< SGBM median filter thresh"]
    TY_INT_SGBM_MEDFILTER_THRESH = 5662,
    #[doc = "< SGBM semi global param p1 scale"]
    TY_INT_SGBM_SEMI_PARAM_P1_SCALE = 5663,
    #[doc = "< Phase num to calc a depth"]
    TY_INT_SGPM_PHASE_NUM = 5664,
    #[doc = "< phase scale when calc a depth"]
    TY_INT_SGPM_NORMAL_PHASE_SCALE = 5665,
    #[doc = "< Phase offset when calc a depth"]
    TY_INT_SGPM_NORMAL_PHASE_OFFSET = 5666,
    #[doc = "< Reference Phase scale when calc a depth"]
    TY_INT_SGPM_REF_PHASE_SCALE = 5667,
    #[doc = "< Reference Phase offset when calc a depth"]
    TY_INT_SGPM_REF_PHASE_OFFSET = 5668,
    #[doc = "< Epipolar Constraint pattern scale"]
    TY_FLOAT_SGPM_EPI_HS = 9765,
    #[doc = "< Epipolar Constraint pattern offset"]
    TY_INT_SGPM_EPI_HF = 5670,
    #[doc = "< Epipolar Constraint enable"]
    TY_BOOL_SGPM_EPI_EN = 17959,
    #[doc = "< Epipolar Constraint channel0"]
    TY_INT_SGPM_EPI_CH0 = 5672,
    #[doc = "< Epipolar Constraint channel1"]
    TY_INT_SGPM_EPI_CH1 = 5673,
    #[doc = "< Epipolar Constraint thresh"]
    TY_INT_SGPM_EPI_THRESH = 5674,
    #[doc = "< Phase order filter enable"]
    TY_BOOL_SGPM_ORDER_FILTER_EN = 17963,
    #[doc = "< Phase order filter channel"]
    TY_INT_SGPM_ORDER_FILTER_CHN = 5676,
    #[doc = "< min depth in mm output"]
    TY_INT_DEPTH_MIN_MM = 5677,
    #[doc = "< max depth in mm ouput"]
    TY_INT_DEPTH_MAX_MM = 5678,
    #[doc = "< Phase compute group attribute"]
    TY_STRUCT_PHC_GROUP_ATTR = 30480,
    #[doc = "< the quality of generated depth, see TY_DEPTH_QUALITY"]
    TY_ENUM_DEPTH_QUALITY = 14592,
    #[doc = "< the threshold of the noise filter, 0 for disabled"]
    TY_INT_FILTER_THRESHOLD = 6401,
    #[doc = "< the frequency channel of tof"]
    TY_INT_TOF_CHANNEL = 6402,
    #[doc = "< the threshold of the tof modulation"]
    TY_INT_TOF_MODULATION_THRESHOLD = 6403,
    #[doc = "< the frequency of tof, see TY_TOF_FREQ"]
    TY_STRUCT_TOF_FREQ = 30980,
    #[doc = "< cooperation if multi-device used"]
    TY_BOOL_TOF_ANTI_INTERFERENCE = 18693,
    #[doc = "< the index of anti-sunlight"]
    TY_INT_TOF_ANTI_SUNLIGHT_INDEX = 6406,
    #[doc = "< the max size of speckle"]
    TY_INT_MAX_SPECKLE_SIZE = 6407,
    #[doc = "< the max diff of speckle"]
    TY_INT_MAX_SPECKLE_DIFF = 6408,
}
pub type TY_FEATURE_ID = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_CONFIG_MODE_LIST {
    TY_CONFIG_MODE_PRESET0 = 0,
    TY_CONFIG_MODE_PRESET1 = 1,
    TY_CONFIG_MODE_PRESET2 = 2,
    TY_CONFIG_MODE_USERSET0 = 65536,
    TY_CONFIG_MODE_USERSET1 = 65537,
    TY_CONFIG_MODE_USERSET2 = 65538,
}
pub type TY_CONFIG_MODE = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_DEPTH_QUALITY_LIST {
    TY_DEPTH_QUALITY_BASIC = 1,
    TY_DEPTH_QUALITY_MEDIUM = 2,
    TY_DEPTH_QUALITY_HIGH = 4,
}
pub type TY_DEPTH_QUALITY = u32;
#[repr(u32)]
#[doc = "set external trigger signal edge"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_TRIGGER_POL_LIST {
    TY_TRIGGER_POL_FALLINGEDGE = 0,
    TY_TRIGGER_POL_RISINGEDGE = 1,
}
pub type TY_TRIGGER_POL = u32;
pub mod TY_INTERFACE_TYPE_LIST {
    #[doc = "Interface type definition\n@see TYGetInterfaceList"]
    pub type Type = u32;
    pub const TY_INTERFACE_UNKNOWN: Type = 0;
    pub const TY_INTERFACE_RAW: Type = 1;
    pub const TY_INTERFACE_USB: Type = 2;
    pub const TY_INTERFACE_ETHERNET: Type = 4;
    pub const TY_INTERFACE_IEEE80211: Type = 8;
    pub const TY_INTERFACE_ALL: Type = 65535;
}
pub type TY_INTERFACE_TYPE = u32;
#[repr(u32)]
#[doc = "Indicate a feature is readable or writable\n@see TYGetFeatureInfo"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_ACCESS_MODE_LIST {
    TY_ACCESS_READABLE = 1,
    TY_ACCESS_WRITABLE = 2,
}
pub type TY_ACCESS_MODE = u8;
#[repr(u32)]
#[doc = "stream async mode"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_STREAM_ASYNC_MODE_LIST {
    TY_STREAM_ASYNC_OFF = 0,
    TY_STREAM_ASYNC_DEPTH = 1,
    TY_STREAM_ASYNC_RGB = 2,
    TY_STREAM_ASYNC_DEPTH_RGB = 3,
    TY_STREAM_ASYNC_ALL = 255,
}
pub type TY_STREAM_ASYNC_MODE = u8;
#[repr(u32)]
#[doc = "Pixel size type definitions\nto define the pixel size in bits\n@see TY_PIXEL_FORMAT_LIST"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_PIXEL_BITS_LIST {
    TY_PIXEL_8BIT = 268435456,
    TY_PIXEL_16BIT = 536870912,
    TY_PIXEL_24BIT = 805306368,
    TY_PIXEL_32BIT = 1073741824,
    TY_PIXEL_10BIT = 1342177280,
    TY_PIXEL_12BIT = 1610612736,
    TY_PIXEL_14BIT = 1879048192,
    TY_PIXEL_48BIT = 2147483648,
    TY_PIXEL_64BIT = 2684354560,
}
pub type TY_PIXEL_BITS = u32;
impl TY_PIXEL_FORMAT_LIST {
    pub const TY_PIXEL_FORMAT_BAYER8GRBG: TY_PIXEL_FORMAT_LIST =
        TY_PIXEL_FORMAT_LIST::TY_PIXEL_FORMAT_BAYER8GB;
}
impl TY_PIXEL_FORMAT_LIST {
    pub const TY_PIXEL_FORMAT_BAYER8RGGB: TY_PIXEL_FORMAT_LIST =
        TY_PIXEL_FORMAT_LIST::TY_PIXEL_FORMAT_BAYER8BG;
}
impl TY_PIXEL_FORMAT_LIST {
    pub const TY_PIXEL_FORMAT_BAYER8GBRG: TY_PIXEL_FORMAT_LIST =
        TY_PIXEL_FORMAT_LIST::TY_PIXEL_FORMAT_BAYER8GR;
}
impl TY_PIXEL_FORMAT_LIST {
    pub const TY_PIXEL_FORMAT_BAYER8BGGR: TY_PIXEL_FORMAT_LIST =
        TY_PIXEL_FORMAT_LIST::TY_PIXEL_FORMAT_BAYER8RG;
}
#[repr(u32)]
#[doc = "pixel format definitions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_PIXEL_FORMAT_LIST {
    TY_PIXEL_FORMAT_UNDEFINED = 0,
    #[doc = "< 0x10000000"]
    TY_PIXEL_FORMAT_MONO = 268435456,
    #[doc = "< 0x11000000"]
    TY_PIXEL_FORMAT_BAYER8GB = 285212672,
    #[doc = "< 0x12000000"]
    TY_PIXEL_FORMAT_BAYER8BG = 301989888,
    #[doc = "< 0x13000000"]
    TY_PIXEL_FORMAT_BAYER8GR = 318767104,
    #[doc = "< 0x14000000"]
    TY_PIXEL_FORMAT_BAYER8RG = 335544320,
    #[doc = "< 0x50000000"]
    TY_PIXEL_FORMAT_CSI_MONO10 = 1342177280,
    #[doc = "< 0x51000000"]
    TY_PIXEL_FORMAT_CSI_BAYER10GRBG = 1358954496,
    #[doc = "< 0x52000000"]
    TY_PIXEL_FORMAT_CSI_BAYER10RGGB = 1375731712,
    #[doc = "< 0x53000000"]
    TY_PIXEL_FORMAT_CSI_BAYER10GBRG = 1392508928,
    #[doc = "< 0x54000000"]
    TY_PIXEL_FORMAT_CSI_BAYER10BGGR = 1409286144,
    #[doc = "< 0x60000000"]
    TY_PIXEL_FORMAT_CSI_MONO12 = 1610612736,
    #[doc = "< 0x61000000"]
    TY_PIXEL_FORMAT_CSI_BAYER12GRBG = 1627389952,
    #[doc = "< 0x62000000"]
    TY_PIXEL_FORMAT_CSI_BAYER12RGGB = 1644167168,
    #[doc = "< 0x63000000"]
    TY_PIXEL_FORMAT_CSI_BAYER12GBRG = 1660944384,
    #[doc = "< 0x64000000"]
    TY_PIXEL_FORMAT_CSI_BAYER12BGGR = 1677721600,
    #[doc = "< 0x20000000"]
    TY_PIXEL_FORMAT_DEPTH16 = 536870912,
    #[doc = "< 0x21000000, yvyu422"]
    TY_PIXEL_FORMAT_YVYU = 553648128,
    #[doc = "< 0x22000000, yuyv422"]
    TY_PIXEL_FORMAT_YUYV = 570425344,
    #[doc = "< 0x23000000,"]
    TY_PIXEL_FORMAT_MONO16 = 587202560,
    #[doc = "< 0xa4000000,"]
    TY_PIXEL_FORMAT_TOF_IR_MONO16 = 2751463424,
    #[doc = "< 0x30000000"]
    TY_PIXEL_FORMAT_RGB = 805306368,
    #[doc = "< 0x31000000"]
    TY_PIXEL_FORMAT_BGR = 822083584,
    #[doc = "< 0x32000000"]
    TY_PIXEL_FORMAT_JPEG = 838860800,
    #[doc = "< 0x33000000"]
    TY_PIXEL_FORMAT_MJPG = 855638016,
    #[doc = "< 0x80000000"]
    TY_PIXEL_FORMAT_RGB48 = 2147483648,
    #[doc = "< 0x81000000"]
    TY_PIXEL_FORMAT_BGR48 = 2164260864,
    #[doc = "< 0x82000000"]
    TY_PIXEL_FORMAT_XYZ48 = 2181038080,
}
pub type TY_PIXEL_FORMAT = u32;
#[repr(u32)]
#[doc = "predefined resolution list"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_RESOLUTION_MODE_LIST {
    #[doc = "< 0x000a0078"]
    TY_RESOLUTION_MODE_160x100 = 655460,
    #[doc = "< 0x000a0078"]
    TY_RESOLUTION_MODE_160x120 = 655480,
    #[doc = "< 0x000f0140"]
    TY_RESOLUTION_MODE_240x320 = 983360,
    #[doc = "< 0x001400b4"]
    TY_RESOLUTION_MODE_320x180 = 1310900,
    #[doc = "< 0x001400c8"]
    TY_RESOLUTION_MODE_320x200 = 1310920,
    #[doc = "< 0x001400f0"]
    TY_RESOLUTION_MODE_320x240 = 1310960,
    #[doc = "< 0x001e0280"]
    TY_RESOLUTION_MODE_480x640 = 1966720,
    #[doc = "< 0x00280168"]
    TY_RESOLUTION_MODE_640x360 = 2621800,
    #[doc = "< 0x00280190"]
    TY_RESOLUTION_MODE_640x400 = 2621840,
    #[doc = "< 0x002801e0"]
    TY_RESOLUTION_MODE_640x480 = 2621920,
    #[doc = "< 0x003c0500"]
    TY_RESOLUTION_MODE_960x1280 = 3933440,
    #[doc = "< 0x005002d0"]
    TY_RESOLUTION_MODE_1280x720 = 5243600,
    #[doc = "< 0x00500320"]
    TY_RESOLUTION_MODE_1280x800 = 5243680,
    #[doc = "< 0x005003c0"]
    TY_RESOLUTION_MODE_1280x960 = 5243840,
    #[doc = "< 0x006404b0"]
    TY_RESOLUTION_MODE_1600x1200 = 6554800,
    #[doc = "< 0x00320258"]
    TY_RESOLUTION_MODE_800x600 = 3277400,
    #[doc = "< 0x00780438"]
    TY_RESOLUTION_MODE_1920x1080 = 7865400,
    #[doc = "< 0x00a00780"]
    TY_RESOLUTION_MODE_2560x1920 = 10487680,
    #[doc = "< 0x00a20798"]
    TY_RESOLUTION_MODE_2592x1944 = 10618776,
    #[doc = "< 0x007805a0"]
    TY_RESOLUTION_MODE_1920x1440 = 7865760,
    #[doc = "< 0x000f0060"]
    TY_RESOLUTION_MODE_240x96 = 983136,
    #[doc = "< 0x00800600"]
    TY_RESOLUTION_MODE_2048x1536 = 8390144,
}
pub type TY_RESOLUTION_MODE = i32;
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_160x100: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_160x100;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_160x120: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_160x120;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_320x180: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_320x180;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_320x200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_320x200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_320x240: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_320x240;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_480x640: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_480x640;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_640x360: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_640x360;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_640x400: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_640x400;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_640x480: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_640x480;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_960x1280: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_960x1280;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_1280x720: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_1280x720;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_1280x960: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_1280x960;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_1280x800: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_1280x800;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_1600x1200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_1600x1200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_800x600: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_800x600;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_1920x1080: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_1920x1080;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_2560x1920: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_2560x1920;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_2592x1944: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_2592x1944;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_1920x1440: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_1920x1440;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_2048x1536: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_2048x1536;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GRBG_240x96: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GB_240x96;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_160x100: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_160x100;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_160x120: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_160x120;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_320x180: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_320x180;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_320x200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_320x200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_320x240: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_320x240;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_480x640: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_480x640;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_640x360: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_640x360;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_640x400: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_640x400;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_640x480: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_640x480;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_960x1280: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_960x1280;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_1280x720: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_1280x720;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_1280x960: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_1280x960;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_1280x800: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_1280x800;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_1600x1200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_1600x1200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_800x600: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_800x600;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_1920x1080: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_1920x1080;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_2560x1920: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_2560x1920;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_2592x1944: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_2592x1944;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_1920x1440: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_1920x1440;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_2048x1536: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_2048x1536;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8RGGB_240x96: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8BG_240x96;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_160x100: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_160x100;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_160x120: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_160x120;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_320x180: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_320x180;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_320x200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_320x200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_320x240: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_320x240;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_480x640: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_480x640;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_640x360: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_640x360;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_640x400: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_640x400;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_640x480: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_640x480;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_960x1280: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_960x1280;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_1280x720: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_1280x720;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_1280x960: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_1280x960;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_1280x800: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_1280x800;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_1600x1200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_1600x1200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_800x600: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_800x600;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_1920x1080: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_1920x1080;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_2560x1920: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_2560x1920;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_2592x1944: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_2592x1944;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_1920x1440: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_1920x1440;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_2048x1536: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_2048x1536;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8GBRG_240x96: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8GR_240x96;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_160x100: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_160x100;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_160x120: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_160x120;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_320x180: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_320x180;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_320x200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_320x200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_320x240: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_320x240;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_480x640: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_480x640;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_640x360: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_640x360;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_640x400: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_640x400;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_640x480: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_640x480;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_960x1280: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_960x1280;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_1280x720: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_1280x720;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_1280x960: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_1280x960;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_1280x800: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_1280x800;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_1600x1200: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_1600x1200;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_800x600: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_800x600;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_1920x1080: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_1920x1080;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_2560x1920: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_2560x1920;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_2592x1944: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_2592x1944;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_1920x1440: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_1920x1440;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_2048x1536: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_2048x1536;
}
impl TY_IMAGE_MODE_LIST {
    pub const TY_IMAGE_MODE_BAYER8BGGR_240x96: TY_IMAGE_MODE_LIST =
        TY_IMAGE_MODE_LIST::TY_IMAGE_MODE_BAYER8RG_240x96;
}
#[repr(u32)]
#[doc = "@brief Predefined Image Mode List\n image mode controls image resolution & format\n predefined image modes named like TY_IMAGE_MODE_MONO_160x120,TY_IMAGE_MODE_RGB_1280x960"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_IMAGE_MODE_LIST {
    TY_IMAGE_MODE_MONO_160x100 = 269090916,
    TY_IMAGE_MODE_MONO_160x120 = 269090936,
    TY_IMAGE_MODE_MONO_320x180 = 269746356,
    TY_IMAGE_MODE_MONO_320x200 = 269746376,
    TY_IMAGE_MODE_MONO_320x240 = 269746416,
    TY_IMAGE_MODE_MONO_480x640 = 270402176,
    TY_IMAGE_MODE_MONO_640x360 = 271057256,
    TY_IMAGE_MODE_MONO_640x400 = 271057296,
    TY_IMAGE_MODE_MONO_640x480 = 271057376,
    TY_IMAGE_MODE_MONO_960x1280 = 272368896,
    TY_IMAGE_MODE_MONO_1280x720 = 273679056,
    TY_IMAGE_MODE_MONO_1280x960 = 273679296,
    TY_IMAGE_MODE_MONO_1280x800 = 273679136,
    TY_IMAGE_MODE_MONO_1600x1200 = 274990256,
    TY_IMAGE_MODE_MONO_800x600 = 271712856,
    TY_IMAGE_MODE_MONO_1920x1080 = 276300856,
    TY_IMAGE_MODE_MONO_2560x1920 = 278923136,
    TY_IMAGE_MODE_MONO_2592x1944 = 279054232,
    TY_IMAGE_MODE_MONO_1920x1440 = 276301216,
    TY_IMAGE_MODE_MONO_2048x1536 = 276825600,
    TY_IMAGE_MODE_MONO_240x96 = 269418592,
    TY_IMAGE_MODE_MONO16_160x100 = 587858020,
    TY_IMAGE_MODE_MONO16_160x120 = 587858040,
    TY_IMAGE_MODE_MONO16_320x180 = 588513460,
    TY_IMAGE_MODE_MONO16_320x200 = 588513480,
    TY_IMAGE_MODE_MONO16_320x240 = 588513520,
    TY_IMAGE_MODE_MONO16_480x640 = 589169280,
    TY_IMAGE_MODE_MONO16_640x360 = 589824360,
    TY_IMAGE_MODE_MONO16_640x400 = 589824400,
    TY_IMAGE_MODE_MONO16_640x480 = 589824480,
    TY_IMAGE_MODE_MONO16_960x1280 = 591136000,
    TY_IMAGE_MODE_MONO16_1280x720 = 592446160,
    TY_IMAGE_MODE_MONO16_1280x960 = 592446400,
    TY_IMAGE_MODE_MONO16_1280x800 = 592446240,
    TY_IMAGE_MODE_MONO16_1600x1200 = 593757360,
    TY_IMAGE_MODE_MONO16_800x600 = 590479960,
    TY_IMAGE_MODE_MONO16_1920x1080 = 595067960,
    TY_IMAGE_MODE_MONO16_2560x1920 = 597690240,
    TY_IMAGE_MODE_MONO16_2592x1944 = 597821336,
    TY_IMAGE_MODE_MONO16_1920x1440 = 595068320,
    TY_IMAGE_MODE_MONO16_2048x1536 = 595592704,
    TY_IMAGE_MODE_MONO16_240x96 = 588185696,
    TY_IMAGE_MODE_TOF_IR_MONO16_160x100 = 2752118884,
    TY_IMAGE_MODE_TOF_IR_MONO16_160x120 = 2752118904,
    TY_IMAGE_MODE_TOF_IR_MONO16_320x180 = 2752774324,
    TY_IMAGE_MODE_TOF_IR_MONO16_320x200 = 2752774344,
    TY_IMAGE_MODE_TOF_IR_MONO16_320x240 = 2752774384,
    TY_IMAGE_MODE_TOF_IR_MONO16_480x640 = 2753430144,
    TY_IMAGE_MODE_TOF_IR_MONO16_640x360 = 2754085224,
    TY_IMAGE_MODE_TOF_IR_MONO16_640x400 = 2754085264,
    TY_IMAGE_MODE_TOF_IR_MONO16_640x480 = 2754085344,
    TY_IMAGE_MODE_TOF_IR_MONO16_960x1280 = 2755396864,
    TY_IMAGE_MODE_TOF_IR_MONO16_1280x720 = 2756707024,
    TY_IMAGE_MODE_TOF_IR_MONO16_1280x960 = 2756707264,
    TY_IMAGE_MODE_TOF_IR_MONO16_1280x800 = 2756707104,
    TY_IMAGE_MODE_TOF_IR_MONO16_1600x1200 = 2758018224,
    TY_IMAGE_MODE_TOF_IR_MONO16_800x600 = 2754740824,
    TY_IMAGE_MODE_TOF_IR_MONO16_1920x1080 = 2759328824,
    TY_IMAGE_MODE_TOF_IR_MONO16_2560x1920 = 2761951104,
    TY_IMAGE_MODE_TOF_IR_MONO16_2592x1944 = 2762082200,
    TY_IMAGE_MODE_TOF_IR_MONO16_1920x1440 = 2759329184,
    TY_IMAGE_MODE_TOF_IR_MONO16_2048x1536 = 2759853568,
    TY_IMAGE_MODE_TOF_IR_MONO16_240x96 = 2752446560,
    TY_IMAGE_MODE_DEPTH16_160x100 = 537526372,
    TY_IMAGE_MODE_DEPTH16_160x120 = 537526392,
    TY_IMAGE_MODE_DEPTH16_320x180 = 538181812,
    TY_IMAGE_MODE_DEPTH16_320x200 = 538181832,
    TY_IMAGE_MODE_DEPTH16_320x240 = 538181872,
    TY_IMAGE_MODE_DEPTH16_480x640 = 538837632,
    TY_IMAGE_MODE_DEPTH16_640x360 = 539492712,
    TY_IMAGE_MODE_DEPTH16_640x400 = 539492752,
    TY_IMAGE_MODE_DEPTH16_640x480 = 539492832,
    TY_IMAGE_MODE_DEPTH16_960x1280 = 540804352,
    TY_IMAGE_MODE_DEPTH16_1280x720 = 542114512,
    TY_IMAGE_MODE_DEPTH16_1280x960 = 542114752,
    TY_IMAGE_MODE_DEPTH16_1280x800 = 542114592,
    TY_IMAGE_MODE_DEPTH16_1600x1200 = 543425712,
    TY_IMAGE_MODE_DEPTH16_800x600 = 540148312,
    TY_IMAGE_MODE_DEPTH16_1920x1080 = 544736312,
    TY_IMAGE_MODE_DEPTH16_2560x1920 = 547358592,
    TY_IMAGE_MODE_DEPTH16_2592x1944 = 547489688,
    TY_IMAGE_MODE_DEPTH16_1920x1440 = 544736672,
    TY_IMAGE_MODE_DEPTH16_2048x1536 = 545261056,
    TY_IMAGE_MODE_DEPTH16_240x96 = 537854048,
    TY_IMAGE_MODE_YVYU_160x100 = 554303588,
    TY_IMAGE_MODE_YVYU_160x120 = 554303608,
    TY_IMAGE_MODE_YVYU_320x180 = 554959028,
    TY_IMAGE_MODE_YVYU_320x200 = 554959048,
    TY_IMAGE_MODE_YVYU_320x240 = 554959088,
    TY_IMAGE_MODE_YVYU_480x640 = 555614848,
    TY_IMAGE_MODE_YVYU_640x360 = 556269928,
    TY_IMAGE_MODE_YVYU_640x400 = 556269968,
    TY_IMAGE_MODE_YVYU_640x480 = 556270048,
    TY_IMAGE_MODE_YVYU_960x1280 = 557581568,
    TY_IMAGE_MODE_YVYU_1280x720 = 558891728,
    TY_IMAGE_MODE_YVYU_1280x960 = 558891968,
    TY_IMAGE_MODE_YVYU_1280x800 = 558891808,
    TY_IMAGE_MODE_YVYU_1600x1200 = 560202928,
    TY_IMAGE_MODE_YVYU_800x600 = 556925528,
    TY_IMAGE_MODE_YVYU_1920x1080 = 561513528,
    TY_IMAGE_MODE_YVYU_2560x1920 = 564135808,
    TY_IMAGE_MODE_YVYU_2592x1944 = 564266904,
    TY_IMAGE_MODE_YVYU_1920x1440 = 561513888,
    TY_IMAGE_MODE_YVYU_2048x1536 = 562038272,
    TY_IMAGE_MODE_YVYU_240x96 = 554631264,
    TY_IMAGE_MODE_YUYV_160x100 = 571080804,
    TY_IMAGE_MODE_YUYV_160x120 = 571080824,
    TY_IMAGE_MODE_YUYV_320x180 = 571736244,
    TY_IMAGE_MODE_YUYV_320x200 = 571736264,
    TY_IMAGE_MODE_YUYV_320x240 = 571736304,
    TY_IMAGE_MODE_YUYV_480x640 = 572392064,
    TY_IMAGE_MODE_YUYV_640x360 = 573047144,
    TY_IMAGE_MODE_YUYV_640x400 = 573047184,
    TY_IMAGE_MODE_YUYV_640x480 = 573047264,
    TY_IMAGE_MODE_YUYV_960x1280 = 574358784,
    TY_IMAGE_MODE_YUYV_1280x720 = 575668944,
    TY_IMAGE_MODE_YUYV_1280x960 = 575669184,
    TY_IMAGE_MODE_YUYV_1280x800 = 575669024,
    TY_IMAGE_MODE_YUYV_1600x1200 = 576980144,
    TY_IMAGE_MODE_YUYV_800x600 = 573702744,
    TY_IMAGE_MODE_YUYV_1920x1080 = 578290744,
    TY_IMAGE_MODE_YUYV_2560x1920 = 580913024,
    TY_IMAGE_MODE_YUYV_2592x1944 = 581044120,
    TY_IMAGE_MODE_YUYV_1920x1440 = 578291104,
    TY_IMAGE_MODE_YUYV_2048x1536 = 578815488,
    TY_IMAGE_MODE_YUYV_240x96 = 571408480,
    TY_IMAGE_MODE_RGB_160x100 = 805961828,
    TY_IMAGE_MODE_RGB_160x120 = 805961848,
    TY_IMAGE_MODE_RGB_320x180 = 806617268,
    TY_IMAGE_MODE_RGB_320x200 = 806617288,
    TY_IMAGE_MODE_RGB_320x240 = 806617328,
    TY_IMAGE_MODE_RGB_480x640 = 807273088,
    TY_IMAGE_MODE_RGB_640x360 = 807928168,
    TY_IMAGE_MODE_RGB_640x400 = 807928208,
    TY_IMAGE_MODE_RGB_640x480 = 807928288,
    TY_IMAGE_MODE_RGB_960x1280 = 809239808,
    TY_IMAGE_MODE_RGB_1280x720 = 810549968,
    TY_IMAGE_MODE_RGB_1280x960 = 810550208,
    TY_IMAGE_MODE_RGB_1280x800 = 810550048,
    TY_IMAGE_MODE_RGB_1600x1200 = 811861168,
    TY_IMAGE_MODE_RGB_800x600 = 808583768,
    TY_IMAGE_MODE_RGB_1920x1080 = 813171768,
    TY_IMAGE_MODE_RGB_2560x1920 = 815794048,
    TY_IMAGE_MODE_RGB_2592x1944 = 815925144,
    TY_IMAGE_MODE_RGB_1920x1440 = 813172128,
    TY_IMAGE_MODE_RGB_2048x1536 = 813696512,
    TY_IMAGE_MODE_RGB_240x96 = 806289504,
    TY_IMAGE_MODE_JPEG_160x100 = 839516260,
    TY_IMAGE_MODE_JPEG_160x120 = 839516280,
    TY_IMAGE_MODE_JPEG_320x180 = 840171700,
    TY_IMAGE_MODE_JPEG_320x200 = 840171720,
    TY_IMAGE_MODE_JPEG_320x240 = 840171760,
    TY_IMAGE_MODE_JPEG_480x640 = 840827520,
    TY_IMAGE_MODE_JPEG_640x360 = 841482600,
    TY_IMAGE_MODE_JPEG_640x400 = 841482640,
    TY_IMAGE_MODE_JPEG_640x480 = 841482720,
    TY_IMAGE_MODE_JPEG_960x1280 = 842794240,
    TY_IMAGE_MODE_JPEG_1280x720 = 844104400,
    TY_IMAGE_MODE_JPEG_1280x960 = 844104640,
    TY_IMAGE_MODE_JPEG_1280x800 = 844104480,
    TY_IMAGE_MODE_JPEG_1600x1200 = 845415600,
    TY_IMAGE_MODE_JPEG_800x600 = 842138200,
    TY_IMAGE_MODE_JPEG_1920x1080 = 846726200,
    TY_IMAGE_MODE_JPEG_2560x1920 = 849348480,
    TY_IMAGE_MODE_JPEG_2592x1944 = 849479576,
    TY_IMAGE_MODE_JPEG_1920x1440 = 846726560,
    TY_IMAGE_MODE_JPEG_2048x1536 = 847250944,
    TY_IMAGE_MODE_JPEG_240x96 = 839843936,
    TY_IMAGE_MODE_BAYER8GB_160x100 = 285868132,
    TY_IMAGE_MODE_BAYER8GB_160x120 = 285868152,
    TY_IMAGE_MODE_BAYER8GB_320x180 = 286523572,
    TY_IMAGE_MODE_BAYER8GB_320x200 = 286523592,
    TY_IMAGE_MODE_BAYER8GB_320x240 = 286523632,
    TY_IMAGE_MODE_BAYER8GB_480x640 = 287179392,
    TY_IMAGE_MODE_BAYER8GB_640x360 = 287834472,
    TY_IMAGE_MODE_BAYER8GB_640x400 = 287834512,
    TY_IMAGE_MODE_BAYER8GB_640x480 = 287834592,
    TY_IMAGE_MODE_BAYER8GB_960x1280 = 289146112,
    TY_IMAGE_MODE_BAYER8GB_1280x720 = 290456272,
    TY_IMAGE_MODE_BAYER8GB_1280x960 = 290456512,
    TY_IMAGE_MODE_BAYER8GB_1280x800 = 290456352,
    TY_IMAGE_MODE_BAYER8GB_1600x1200 = 291767472,
    TY_IMAGE_MODE_BAYER8GB_800x600 = 288490072,
    TY_IMAGE_MODE_BAYER8GB_1920x1080 = 293078072,
    TY_IMAGE_MODE_BAYER8GB_2560x1920 = 295700352,
    TY_IMAGE_MODE_BAYER8GB_2592x1944 = 295831448,
    TY_IMAGE_MODE_BAYER8GB_1920x1440 = 293078432,
    TY_IMAGE_MODE_BAYER8GB_2048x1536 = 293602816,
    TY_IMAGE_MODE_BAYER8GB_240x96 = 286195808,
    TY_IMAGE_MODE_BAYER8BG_160x100 = 302645348,
    TY_IMAGE_MODE_BAYER8BG_160x120 = 302645368,
    TY_IMAGE_MODE_BAYER8BG_320x180 = 303300788,
    TY_IMAGE_MODE_BAYER8BG_320x200 = 303300808,
    TY_IMAGE_MODE_BAYER8BG_320x240 = 303300848,
    TY_IMAGE_MODE_BAYER8BG_480x640 = 303956608,
    TY_IMAGE_MODE_BAYER8BG_640x360 = 304611688,
    TY_IMAGE_MODE_BAYER8BG_640x400 = 304611728,
    TY_IMAGE_MODE_BAYER8BG_640x480 = 304611808,
    TY_IMAGE_MODE_BAYER8BG_960x1280 = 305923328,
    TY_IMAGE_MODE_BAYER8BG_1280x720 = 307233488,
    TY_IMAGE_MODE_BAYER8BG_1280x960 = 307233728,
    TY_IMAGE_MODE_BAYER8BG_1280x800 = 307233568,
    TY_IMAGE_MODE_BAYER8BG_1600x1200 = 308544688,
    TY_IMAGE_MODE_BAYER8BG_800x600 = 305267288,
    TY_IMAGE_MODE_BAYER8BG_1920x1080 = 309855288,
    TY_IMAGE_MODE_BAYER8BG_2560x1920 = 312477568,
    TY_IMAGE_MODE_BAYER8BG_2592x1944 = 312608664,
    TY_IMAGE_MODE_BAYER8BG_1920x1440 = 309855648,
    TY_IMAGE_MODE_BAYER8BG_2048x1536 = 310380032,
    TY_IMAGE_MODE_BAYER8BG_240x96 = 302973024,
    TY_IMAGE_MODE_BAYER8GR_160x100 = 319422564,
    TY_IMAGE_MODE_BAYER8GR_160x120 = 319422584,
    TY_IMAGE_MODE_BAYER8GR_320x180 = 320078004,
    TY_IMAGE_MODE_BAYER8GR_320x200 = 320078024,
    TY_IMAGE_MODE_BAYER8GR_320x240 = 320078064,
    TY_IMAGE_MODE_BAYER8GR_480x640 = 320733824,
    TY_IMAGE_MODE_BAYER8GR_640x360 = 321388904,
    TY_IMAGE_MODE_BAYER8GR_640x400 = 321388944,
    TY_IMAGE_MODE_BAYER8GR_640x480 = 321389024,
    TY_IMAGE_MODE_BAYER8GR_960x1280 = 322700544,
    TY_IMAGE_MODE_BAYER8GR_1280x720 = 324010704,
    TY_IMAGE_MODE_BAYER8GR_1280x960 = 324010944,
    TY_IMAGE_MODE_BAYER8GR_1280x800 = 324010784,
    TY_IMAGE_MODE_BAYER8GR_1600x1200 = 325321904,
    TY_IMAGE_MODE_BAYER8GR_800x600 = 322044504,
    TY_IMAGE_MODE_BAYER8GR_1920x1080 = 326632504,
    TY_IMAGE_MODE_BAYER8GR_2560x1920 = 329254784,
    TY_IMAGE_MODE_BAYER8GR_2592x1944 = 329385880,
    TY_IMAGE_MODE_BAYER8GR_1920x1440 = 326632864,
    TY_IMAGE_MODE_BAYER8GR_2048x1536 = 327157248,
    TY_IMAGE_MODE_BAYER8GR_240x96 = 319750240,
    TY_IMAGE_MODE_BAYER8RG_160x100 = 336199780,
    TY_IMAGE_MODE_BAYER8RG_160x120 = 336199800,
    TY_IMAGE_MODE_BAYER8RG_320x180 = 336855220,
    TY_IMAGE_MODE_BAYER8RG_320x200 = 336855240,
    TY_IMAGE_MODE_BAYER8RG_320x240 = 336855280,
    TY_IMAGE_MODE_BAYER8RG_480x640 = 337511040,
    TY_IMAGE_MODE_BAYER8RG_640x360 = 338166120,
    TY_IMAGE_MODE_BAYER8RG_640x400 = 338166160,
    TY_IMAGE_MODE_BAYER8RG_640x480 = 338166240,
    TY_IMAGE_MODE_BAYER8RG_960x1280 = 339477760,
    TY_IMAGE_MODE_BAYER8RG_1280x720 = 340787920,
    TY_IMAGE_MODE_BAYER8RG_1280x960 = 340788160,
    TY_IMAGE_MODE_BAYER8RG_1280x800 = 340788000,
    TY_IMAGE_MODE_BAYER8RG_1600x1200 = 342099120,
    TY_IMAGE_MODE_BAYER8RG_800x600 = 338821720,
    TY_IMAGE_MODE_BAYER8RG_1920x1080 = 343409720,
    TY_IMAGE_MODE_BAYER8RG_2560x1920 = 346032000,
    TY_IMAGE_MODE_BAYER8RG_2592x1944 = 346163096,
    TY_IMAGE_MODE_BAYER8RG_1920x1440 = 343410080,
    TY_IMAGE_MODE_BAYER8RG_2048x1536 = 343934464,
    TY_IMAGE_MODE_BAYER8RG_240x96 = 336527456,
    TY_IMAGE_MODE_CSI_MONO10_160x100 = 1342832740,
    TY_IMAGE_MODE_CSI_MONO10_160x120 = 1342832760,
    TY_IMAGE_MODE_CSI_MONO10_320x180 = 1343488180,
    TY_IMAGE_MODE_CSI_MONO10_320x200 = 1343488200,
    TY_IMAGE_MODE_CSI_MONO10_320x240 = 1343488240,
    TY_IMAGE_MODE_CSI_MONO10_480x640 = 1344144000,
    TY_IMAGE_MODE_CSI_MONO10_640x360 = 1344799080,
    TY_IMAGE_MODE_CSI_MONO10_640x400 = 1344799120,
    TY_IMAGE_MODE_CSI_MONO10_640x480 = 1344799200,
    TY_IMAGE_MODE_CSI_MONO10_960x1280 = 1346110720,
    TY_IMAGE_MODE_CSI_MONO10_1280x720 = 1347420880,
    TY_IMAGE_MODE_CSI_MONO10_1280x960 = 1347421120,
    TY_IMAGE_MODE_CSI_MONO10_1280x800 = 1347420960,
    TY_IMAGE_MODE_CSI_MONO10_1600x1200 = 1348732080,
    TY_IMAGE_MODE_CSI_MONO10_800x600 = 1345454680,
    TY_IMAGE_MODE_CSI_MONO10_1920x1080 = 1350042680,
    TY_IMAGE_MODE_CSI_MONO10_2560x1920 = 1352664960,
    TY_IMAGE_MODE_CSI_MONO10_2592x1944 = 1352796056,
    TY_IMAGE_MODE_CSI_MONO10_1920x1440 = 1350043040,
    TY_IMAGE_MODE_CSI_MONO10_2048x1536 = 1350567424,
    TY_IMAGE_MODE_CSI_MONO10_240x96 = 1343160416,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_160x100 = 1359609956,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_160x120 = 1359609976,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_320x180 = 1360265396,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_320x200 = 1360265416,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_320x240 = 1360265456,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_480x640 = 1360921216,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_640x360 = 1361576296,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_640x400 = 1361576336,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_640x480 = 1361576416,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_960x1280 = 1362887936,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_1280x720 = 1364198096,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_1280x960 = 1364198336,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_1280x800 = 1364198176,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_1600x1200 = 1365509296,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_800x600 = 1362231896,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_1920x1080 = 1366819896,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_2560x1920 = 1369442176,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_2592x1944 = 1369573272,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_1920x1440 = 1366820256,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_2048x1536 = 1367344640,
    TY_IMAGE_MODE_CSI_BAYER10GRBG_240x96 = 1359937632,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_160x100 = 1376387172,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_160x120 = 1376387192,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_320x180 = 1377042612,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_320x200 = 1377042632,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_320x240 = 1377042672,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_480x640 = 1377698432,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_640x360 = 1378353512,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_640x400 = 1378353552,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_640x480 = 1378353632,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_960x1280 = 1379665152,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_1280x720 = 1380975312,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_1280x960 = 1380975552,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_1280x800 = 1380975392,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_1600x1200 = 1382286512,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_800x600 = 1379009112,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_1920x1080 = 1383597112,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_2560x1920 = 1386219392,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_2592x1944 = 1386350488,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_1920x1440 = 1383597472,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_2048x1536 = 1384121856,
    TY_IMAGE_MODE_CSI_BAYER10RGGB_240x96 = 1376714848,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_160x100 = 1393164388,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_160x120 = 1393164408,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_320x180 = 1393819828,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_320x200 = 1393819848,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_320x240 = 1393819888,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_480x640 = 1394475648,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_640x360 = 1395130728,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_640x400 = 1395130768,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_640x480 = 1395130848,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_960x1280 = 1396442368,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_1280x720 = 1397752528,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_1280x960 = 1397752768,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_1280x800 = 1397752608,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_1600x1200 = 1399063728,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_800x600 = 1395786328,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_1920x1080 = 1400374328,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_2560x1920 = 1402996608,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_2592x1944 = 1403127704,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_1920x1440 = 1400374688,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_2048x1536 = 1400899072,
    TY_IMAGE_MODE_CSI_BAYER10GBRG_240x96 = 1393492064,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_160x100 = 1409941604,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_160x120 = 1409941624,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_320x180 = 1410597044,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_320x200 = 1410597064,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_320x240 = 1410597104,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_480x640 = 1411252864,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_640x360 = 1411907944,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_640x400 = 1411907984,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_640x480 = 1411908064,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_960x1280 = 1413219584,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_1280x720 = 1414529744,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_1280x960 = 1414529984,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_1280x800 = 1414529824,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_1600x1200 = 1415840944,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_800x600 = 1412563544,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_1920x1080 = 1417151544,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_2560x1920 = 1419773824,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_2592x1944 = 1419904920,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_1920x1440 = 1417151904,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_2048x1536 = 1417676288,
    TY_IMAGE_MODE_CSI_BAYER10BGGR_240x96 = 1410269280,
    TY_IMAGE_MODE_CSI_MONO12_160x100 = 1611268196,
    TY_IMAGE_MODE_CSI_MONO12_160x120 = 1611268216,
    TY_IMAGE_MODE_CSI_MONO12_320x180 = 1611923636,
    TY_IMAGE_MODE_CSI_MONO12_320x200 = 1611923656,
    TY_IMAGE_MODE_CSI_MONO12_320x240 = 1611923696,
    TY_IMAGE_MODE_CSI_MONO12_480x640 = 1612579456,
    TY_IMAGE_MODE_CSI_MONO12_640x360 = 1613234536,
    TY_IMAGE_MODE_CSI_MONO12_640x400 = 1613234576,
    TY_IMAGE_MODE_CSI_MONO12_640x480 = 1613234656,
    TY_IMAGE_MODE_CSI_MONO12_960x1280 = 1614546176,
    TY_IMAGE_MODE_CSI_MONO12_1280x720 = 1615856336,
    TY_IMAGE_MODE_CSI_MONO12_1280x960 = 1615856576,
    TY_IMAGE_MODE_CSI_MONO12_1280x800 = 1615856416,
    TY_IMAGE_MODE_CSI_MONO12_1600x1200 = 1617167536,
    TY_IMAGE_MODE_CSI_MONO12_800x600 = 1613890136,
    TY_IMAGE_MODE_CSI_MONO12_1920x1080 = 1618478136,
    TY_IMAGE_MODE_CSI_MONO12_2560x1920 = 1621100416,
    TY_IMAGE_MODE_CSI_MONO12_2592x1944 = 1621231512,
    TY_IMAGE_MODE_CSI_MONO12_1920x1440 = 1618478496,
    TY_IMAGE_MODE_CSI_MONO12_2048x1536 = 1619002880,
    TY_IMAGE_MODE_CSI_MONO12_240x96 = 1611595872,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_160x100 = 1628045412,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_160x120 = 1628045432,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_320x180 = 1628700852,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_320x200 = 1628700872,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_320x240 = 1628700912,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_480x640 = 1629356672,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_640x360 = 1630011752,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_640x400 = 1630011792,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_640x480 = 1630011872,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_960x1280 = 1631323392,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_1280x720 = 1632633552,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_1280x960 = 1632633792,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_1280x800 = 1632633632,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_1600x1200 = 1633944752,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_800x600 = 1630667352,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_1920x1080 = 1635255352,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_2560x1920 = 1637877632,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_2592x1944 = 1638008728,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_1920x1440 = 1635255712,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_2048x1536 = 1635780096,
    TY_IMAGE_MODE_CSI_BAYER12GRBG_240x96 = 1628373088,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_160x100 = 1644822628,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_160x120 = 1644822648,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_320x180 = 1645478068,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_320x200 = 1645478088,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_320x240 = 1645478128,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_480x640 = 1646133888,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_640x360 = 1646788968,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_640x400 = 1646789008,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_640x480 = 1646789088,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_960x1280 = 1648100608,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_1280x720 = 1649410768,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_1280x960 = 1649411008,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_1280x800 = 1649410848,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_1600x1200 = 1650721968,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_800x600 = 1647444568,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_1920x1080 = 1652032568,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_2560x1920 = 1654654848,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_2592x1944 = 1654785944,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_1920x1440 = 1652032928,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_2048x1536 = 1652557312,
    TY_IMAGE_MODE_CSI_BAYER12RGGB_240x96 = 1645150304,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_160x100 = 1661599844,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_160x120 = 1661599864,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_320x180 = 1662255284,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_320x200 = 1662255304,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_320x240 = 1662255344,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_480x640 = 1662911104,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_640x360 = 1663566184,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_640x400 = 1663566224,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_640x480 = 1663566304,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_960x1280 = 1664877824,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_1280x720 = 1666187984,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_1280x960 = 1666188224,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_1280x800 = 1666188064,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_1600x1200 = 1667499184,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_800x600 = 1664221784,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_1920x1080 = 1668809784,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_2560x1920 = 1671432064,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_2592x1944 = 1671563160,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_1920x1440 = 1668810144,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_2048x1536 = 1669334528,
    TY_IMAGE_MODE_CSI_BAYER12GBRG_240x96 = 1661927520,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_160x100 = 1678377060,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_160x120 = 1678377080,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_320x180 = 1679032500,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_320x200 = 1679032520,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_320x240 = 1679032560,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_480x640 = 1679688320,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_640x360 = 1680343400,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_640x400 = 1680343440,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_640x480 = 1680343520,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_960x1280 = 1681655040,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_1280x720 = 1682965200,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_1280x960 = 1682965440,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_1280x800 = 1682965280,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_1600x1200 = 1684276400,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_800x600 = 1680999000,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_1920x1080 = 1685587000,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_2560x1920 = 1688209280,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_2592x1944 = 1688340376,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_1920x1440 = 1685587360,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_2048x1536 = 1686111744,
    TY_IMAGE_MODE_CSI_BAYER12BGGR_240x96 = 1678704736,
    TY_IMAGE_MODE_MJPG_160x100 = 856293476,
    TY_IMAGE_MODE_MJPG_160x120 = 856293496,
    TY_IMAGE_MODE_MJPG_320x180 = 856948916,
    TY_IMAGE_MODE_MJPG_320x200 = 856948936,
    TY_IMAGE_MODE_MJPG_320x240 = 856948976,
    TY_IMAGE_MODE_MJPG_480x640 = 857604736,
    TY_IMAGE_MODE_MJPG_640x360 = 858259816,
    TY_IMAGE_MODE_MJPG_640x400 = 858259856,
    TY_IMAGE_MODE_MJPG_640x480 = 858259936,
    TY_IMAGE_MODE_MJPG_960x1280 = 859571456,
    TY_IMAGE_MODE_MJPG_1280x720 = 860881616,
    TY_IMAGE_MODE_MJPG_1280x960 = 860881856,
    TY_IMAGE_MODE_MJPG_1280x800 = 860881696,
    TY_IMAGE_MODE_MJPG_1600x1200 = 862192816,
    TY_IMAGE_MODE_MJPG_800x600 = 858915416,
    TY_IMAGE_MODE_MJPG_1920x1080 = 863503416,
    TY_IMAGE_MODE_MJPG_2560x1920 = 866125696,
    TY_IMAGE_MODE_MJPG_2592x1944 = 866256792,
    TY_IMAGE_MODE_MJPG_1920x1440 = 863503776,
    TY_IMAGE_MODE_MJPG_2048x1536 = 864028160,
    TY_IMAGE_MODE_MJPG_240x96 = 856621152,
    TY_IMAGE_MODE_RGB48_160x100 = 2148139108,
    TY_IMAGE_MODE_RGB48_160x120 = 2148139128,
    TY_IMAGE_MODE_RGB48_320x180 = 2148794548,
    TY_IMAGE_MODE_RGB48_320x200 = 2148794568,
    TY_IMAGE_MODE_RGB48_320x240 = 2148794608,
    TY_IMAGE_MODE_RGB48_480x640 = 2149450368,
    TY_IMAGE_MODE_RGB48_640x360 = 2150105448,
    TY_IMAGE_MODE_RGB48_640x400 = 2150105488,
    TY_IMAGE_MODE_RGB48_640x480 = 2150105568,
    TY_IMAGE_MODE_RGB48_960x1280 = 2151417088,
    TY_IMAGE_MODE_RGB48_1280x720 = 2152727248,
    TY_IMAGE_MODE_RGB48_1280x960 = 2152727488,
    TY_IMAGE_MODE_RGB48_1280x800 = 2152727328,
    TY_IMAGE_MODE_RGB48_1600x1200 = 2154038448,
    TY_IMAGE_MODE_RGB48_800x600 = 2150761048,
    TY_IMAGE_MODE_RGB48_1920x1080 = 2155349048,
    TY_IMAGE_MODE_RGB48_2560x1920 = 2157971328,
    TY_IMAGE_MODE_RGB48_2592x1944 = 2158102424,
    TY_IMAGE_MODE_RGB48_1920x1440 = 2155349408,
    TY_IMAGE_MODE_RGB48_2048x1536 = 2155873792,
    TY_IMAGE_MODE_RGB48_240x96 = 2148466784,
    TY_IMAGE_MODE_BGR48_160x100 = 2164916324,
    TY_IMAGE_MODE_BGR48_160x120 = 2164916344,
    TY_IMAGE_MODE_BGR48_320x180 = 2165571764,
    TY_IMAGE_MODE_BGR48_320x200 = 2165571784,
    TY_IMAGE_MODE_BGR48_320x240 = 2165571824,
    TY_IMAGE_MODE_BGR48_480x640 = 2166227584,
    TY_IMAGE_MODE_BGR48_640x360 = 2166882664,
    TY_IMAGE_MODE_BGR48_640x400 = 2166882704,
    TY_IMAGE_MODE_BGR48_640x480 = 2166882784,
    TY_IMAGE_MODE_BGR48_960x1280 = 2168194304,
    TY_IMAGE_MODE_BGR48_1280x720 = 2169504464,
    TY_IMAGE_MODE_BGR48_1280x960 = 2169504704,
    TY_IMAGE_MODE_BGR48_1280x800 = 2169504544,
    TY_IMAGE_MODE_BGR48_1600x1200 = 2170815664,
    TY_IMAGE_MODE_BGR48_800x600 = 2167538264,
    TY_IMAGE_MODE_BGR48_1920x1080 = 2172126264,
    TY_IMAGE_MODE_BGR48_2560x1920 = 2174748544,
    TY_IMAGE_MODE_BGR48_2592x1944 = 2174879640,
    TY_IMAGE_MODE_BGR48_1920x1440 = 2172126624,
    TY_IMAGE_MODE_BGR48_2048x1536 = 2172651008,
    TY_IMAGE_MODE_BGR48_240x96 = 2165244000,
    TY_IMAGE_MODE_BGR_160x100 = 822739044,
    TY_IMAGE_MODE_BGR_160x120 = 822739064,
    TY_IMAGE_MODE_BGR_320x180 = 823394484,
    TY_IMAGE_MODE_BGR_320x200 = 823394504,
    TY_IMAGE_MODE_BGR_320x240 = 823394544,
    TY_IMAGE_MODE_BGR_480x640 = 824050304,
    TY_IMAGE_MODE_BGR_640x360 = 824705384,
    TY_IMAGE_MODE_BGR_640x400 = 824705424,
    TY_IMAGE_MODE_BGR_640x480 = 824705504,
    TY_IMAGE_MODE_BGR_960x1280 = 826017024,
    TY_IMAGE_MODE_BGR_1280x720 = 827327184,
    TY_IMAGE_MODE_BGR_1280x960 = 827327424,
    TY_IMAGE_MODE_BGR_1280x800 = 827327264,
    TY_IMAGE_MODE_BGR_1600x1200 = 828638384,
    TY_IMAGE_MODE_BGR_800x600 = 825360984,
    TY_IMAGE_MODE_BGR_1920x1080 = 829948984,
    TY_IMAGE_MODE_BGR_2560x1920 = 832571264,
    TY_IMAGE_MODE_BGR_2592x1944 = 832702360,
    TY_IMAGE_MODE_BGR_1920x1440 = 829949344,
    TY_IMAGE_MODE_BGR_2048x1536 = 830473728,
    TY_IMAGE_MODE_BGR_240x96 = 823066720,
    TY_IMAGE_MODE_XYZ48_160x100 = 2181693540,
    TY_IMAGE_MODE_XYZ48_160x120 = 2181693560,
    TY_IMAGE_MODE_XYZ48_320x180 = 2182348980,
    TY_IMAGE_MODE_XYZ48_320x200 = 2182349000,
    TY_IMAGE_MODE_XYZ48_320x240 = 2182349040,
    TY_IMAGE_MODE_XYZ48_480x640 = 2183004800,
    TY_IMAGE_MODE_XYZ48_640x360 = 2183659880,
    TY_IMAGE_MODE_XYZ48_640x400 = 2183659920,
    TY_IMAGE_MODE_XYZ48_640x480 = 2183660000,
    TY_IMAGE_MODE_XYZ48_960x1280 = 2184971520,
    TY_IMAGE_MODE_XYZ48_1280x720 = 2186281680,
    TY_IMAGE_MODE_XYZ48_1280x960 = 2186281920,
    TY_IMAGE_MODE_XYZ48_1280x800 = 2186281760,
    TY_IMAGE_MODE_XYZ48_1600x1200 = 2187592880,
    TY_IMAGE_MODE_XYZ48_800x600 = 2184315480,
    TY_IMAGE_MODE_XYZ48_1920x1080 = 2188903480,
    TY_IMAGE_MODE_XYZ48_2560x1920 = 2191525760,
    TY_IMAGE_MODE_XYZ48_2592x1944 = 2191656856,
    TY_IMAGE_MODE_XYZ48_1920x1440 = 2188903840,
    TY_IMAGE_MODE_XYZ48_2048x1536 = 2189428224,
    TY_IMAGE_MODE_XYZ48_240x96 = 2182021216,
}
pub type TY_IMAGE_MODE = u32;
#[repr(u32)]
#[doc = "@see refer to sample SimpleView_TriggerMode for detail usage"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_TRIGGER_MODE_LIST {
    #[doc = "<not trigger mode, continuous mode"]
    TY_TRIGGER_MODE_OFF = 0,
    #[doc = "<slave mode, receive soft/hardware triggers"]
    TY_TRIGGER_MODE_SLAVE = 1,
    #[doc = "<master mode 1, sending one trigger signal once received a soft/hardware trigger"]
    TY_TRIGGER_MODE_M_SIG = 2,
    #[doc = "<master mode 2, periodic sending one trigger signals, 'fps' param should be set"]
    TY_TRIGGER_MODE_M_PER = 3,
    #[doc = "<discard, using TY_TRIGGER_MODE28"]
    TY_TRIGGER_MODE_SIG_PASS = 18,
    #[doc = "<discard, using TY_TRIGGER_MODE29"]
    TY_TRIGGER_MODE_PER_PASS = 19,
    TY_TRIGGER_MODE_TIMER_LIST = 20,
    TY_TRIGGER_MODE_TIMER_PERIOD = 21,
    TY_TRIGGER_MODE28 = 28,
    TY_TRIGGER_MODE29 = 29,
    #[doc = "<trigger mode 30,Alternate output depth image/ir image"]
    TY_TRIGGER_MODE_PER_PASS2 = 30,
    TY_TRIGGER_WORK_MODE31 = 31,
    TY_TRIGGER_MODE_SIG_LASER = 34,
}
pub type TY_TRIGGER_MODE = i16;
#[repr(u32)]
#[doc = "@brief type of time sync"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_TIME_SYNC_TYPE_LIST {
    TY_TIME_SYNC_TYPE_NONE = 0,
    TY_TIME_SYNC_TYPE_HOST = 1,
    TY_TIME_SYNC_TYPE_NTP = 2,
    TY_TIME_SYNC_TYPE_PTP = 3,
    TY_TIME_SYNC_TYPE_CAN = 4,
    TY_TIME_SYNC_TYPE_PTP_MASTER = 5,
}
pub type TY_TIME_SYNC_TYPE = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_E_VOLT_T_LIST {
    TY_EXT_SUP = 0,
    TY_DO_5V = 1,
    TY_DO_12V = 2,
}
pub type TY_E_VOLT_T = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_E_DO_MODE_LIST {
    TY_DO_LOW = 0,
    TY_DO_HIGH = 1,
    TY_DO_PWM = 2,
    TY_DO_CAM_TRIG = 3,
}
pub type TY_E_DO_MODE = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_E_DI_MODE_LIST {
    TY_DI_POLL = 0,
    TY_DI_NE_INT = 1,
    TY_DI_PE_INT = 2,
}
pub type TY_E_DI_MODE = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_E_DI_INT_ACTION_LIST {
    TY_DI_INT_NO_OP = 0,
    TY_DI_INT_TRIG_CAP = 1,
    TY_DI_INT_EVENT = 2,
}
pub type TY_E_DI_INT_ACTION = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_VERSION_INFO {
    pub major: i32,
    pub minor: i32,
    pub patch: i32,
    pub reserved: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_VERSION_INFO"][::std::mem::size_of::<TY_VERSION_INFO>() - 16usize];
    ["Alignment of TY_VERSION_INFO"][::std::mem::align_of::<TY_VERSION_INFO>() - 1usize];
    ["Offset of field: TY_VERSION_INFO::major"]
        [::std::mem::offset_of!(TY_VERSION_INFO, major) - 0usize];
    ["Offset of field: TY_VERSION_INFO::minor"]
        [::std::mem::offset_of!(TY_VERSION_INFO, minor) - 4usize];
    ["Offset of field: TY_VERSION_INFO::patch"]
        [::std::mem::offset_of!(TY_VERSION_INFO, patch) - 8usize];
    ["Offset of field: TY_VERSION_INFO::reserved"]
        [::std::mem::offset_of!(TY_VERSION_INFO, reserved) - 12usize];
};
#[doc = " @brief device network information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TY_DEVICE_NET_INFO {
    pub mac: [::std::os::raw::c_char; 32usize],
    pub ip: [::std::os::raw::c_char; 32usize],
    pub netmask: [::std::os::raw::c_char; 32usize],
    pub gateway: [::std::os::raw::c_char; 32usize],
    pub broadcast: [::std::os::raw::c_char; 32usize],
    pub reserved: [::std::os::raw::c_char; 96usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_DEVICE_NET_INFO"][::std::mem::size_of::<TY_DEVICE_NET_INFO>() - 256usize];
    ["Alignment of TY_DEVICE_NET_INFO"][::std::mem::align_of::<TY_DEVICE_NET_INFO>() - 1usize];
    ["Offset of field: TY_DEVICE_NET_INFO::mac"]
        [::std::mem::offset_of!(TY_DEVICE_NET_INFO, mac) - 0usize];
    ["Offset of field: TY_DEVICE_NET_INFO::ip"]
        [::std::mem::offset_of!(TY_DEVICE_NET_INFO, ip) - 32usize];
    ["Offset of field: TY_DEVICE_NET_INFO::netmask"]
        [::std::mem::offset_of!(TY_DEVICE_NET_INFO, netmask) - 64usize];
    ["Offset of field: TY_DEVICE_NET_INFO::gateway"]
        [::std::mem::offset_of!(TY_DEVICE_NET_INFO, gateway) - 96usize];
    ["Offset of field: TY_DEVICE_NET_INFO::broadcast"]
        [::std::mem::offset_of!(TY_DEVICE_NET_INFO, broadcast) - 128usize];
    ["Offset of field: TY_DEVICE_NET_INFO::reserved"]
        [::std::mem::offset_of!(TY_DEVICE_NET_INFO, reserved) - 160usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_DEVICE_USB_INFO {
    pub bus: ::std::os::raw::c_int,
    pub addr: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_char; 248usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_DEVICE_USB_INFO"][::std::mem::size_of::<TY_DEVICE_USB_INFO>() - 256usize];
    ["Alignment of TY_DEVICE_USB_INFO"][::std::mem::align_of::<TY_DEVICE_USB_INFO>() - 1usize];
    ["Offset of field: TY_DEVICE_USB_INFO::bus"]
        [::std::mem::offset_of!(TY_DEVICE_USB_INFO, bus) - 0usize];
    ["Offset of field: TY_DEVICE_USB_INFO::addr"]
        [::std::mem::offset_of!(TY_DEVICE_USB_INFO, addr) - 4usize];
    ["Offset of field: TY_DEVICE_USB_INFO::reserved"]
        [::std::mem::offset_of!(TY_DEVICE_USB_INFO, reserved) - 8usize];
};
#[doc = "@see TYGetInterfaceList"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_INTERFACE_INFO {
    pub name: [::std::os::raw::c_char; 32usize],
    pub id: [::std::os::raw::c_char; 32usize],
    pub type_: TY_INTERFACE_TYPE,
    pub reserved: [::std::os::raw::c_char; 4usize],
    pub netInfo: TY_DEVICE_NET_INFO,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_INTERFACE_INFO"][::std::mem::size_of::<TY_INTERFACE_INFO>() - 328usize];
    ["Alignment of TY_INTERFACE_INFO"][::std::mem::align_of::<TY_INTERFACE_INFO>() - 1usize];
    ["Offset of field: TY_INTERFACE_INFO::name"]
        [::std::mem::offset_of!(TY_INTERFACE_INFO, name) - 0usize];
    ["Offset of field: TY_INTERFACE_INFO::id"]
        [::std::mem::offset_of!(TY_INTERFACE_INFO, id) - 32usize];
    ["Offset of field: TY_INTERFACE_INFO::type_"]
        [::std::mem::offset_of!(TY_INTERFACE_INFO, type_) - 64usize];
    ["Offset of field: TY_INTERFACE_INFO::reserved"]
        [::std::mem::offset_of!(TY_INTERFACE_INFO, reserved) - 68usize];
    ["Offset of field: TY_INTERFACE_INFO::netInfo"]
        [::std::mem::offset_of!(TY_INTERFACE_INFO, netInfo) - 72usize];
};
#[doc = "@see TYGetDeviceList"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TY_DEVICE_BASE_INFO {
    pub iface: TY_INTERFACE_INFO,
    #[doc = "<device serial number"]
    pub id: [::std::os::raw::c_char; 32usize],
    pub vendorName: [::std::os::raw::c_char; 32usize],
    pub userDefinedName: [::std::os::raw::c_char; 32usize],
    #[doc = "<device model name"]
    pub modelName: [::std::os::raw::c_char; 32usize],
    #[doc = "<deprecated"]
    pub hardwareVersion: TY_VERSION_INFO,
    #[doc = "<deprecated"]
    pub firmwareVersion: TY_VERSION_INFO,
    pub __bindgen_anon_1: TY_DEVICE_BASE_INFO__bindgen_ty_1,
    pub buildHash: [::std::os::raw::c_char; 256usize],
    pub configVersion: [::std::os::raw::c_char; 256usize],
    pub reserved: [::std::os::raw::c_char; 256usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TY_DEVICE_BASE_INFO__bindgen_ty_1 {
    pub netInfo: TY_DEVICE_NET_INFO,
    pub usbInfo: TY_DEVICE_USB_INFO,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_DEVICE_BASE_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<TY_DEVICE_BASE_INFO__bindgen_ty_1>() - 256usize];
    ["Alignment of TY_DEVICE_BASE_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<TY_DEVICE_BASE_INFO__bindgen_ty_1>() - 1usize];
    ["Offset of field: TY_DEVICE_BASE_INFO__bindgen_ty_1::netInfo"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO__bindgen_ty_1, netInfo) - 0usize];
    ["Offset of field: TY_DEVICE_BASE_INFO__bindgen_ty_1::usbInfo"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO__bindgen_ty_1, usbInfo) - 0usize];
};
impl ::std::fmt::Debug for TY_DEVICE_BASE_INFO__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "TY_DEVICE_BASE_INFO__bindgen_ty_1 {{ union }}")
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_DEVICE_BASE_INFO"][::std::mem::size_of::<TY_DEVICE_BASE_INFO>() - 1512usize];
    ["Alignment of TY_DEVICE_BASE_INFO"][::std::mem::align_of::<TY_DEVICE_BASE_INFO>() - 1usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::iface"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, iface) - 0usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::id"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, id) - 328usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::vendorName"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, vendorName) - 360usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::userDefinedName"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, userDefinedName) - 392usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::modelName"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, modelName) - 424usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::hardwareVersion"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, hardwareVersion) - 456usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::firmwareVersion"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, firmwareVersion) - 472usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::buildHash"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, buildHash) - 744usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::configVersion"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, configVersion) - 1000usize];
    ["Offset of field: TY_DEVICE_BASE_INFO::reserved"]
        [::std::mem::offset_of!(TY_DEVICE_BASE_INFO, reserved) - 1256usize];
};
impl ::std::fmt::Debug for TY_DEVICE_BASE_INFO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "TY_DEVICE_BASE_INFO {{ iface: {:?}, id: {:?}, vendorName: {:?}, userDefinedName: {:?}, modelName: {:?}, hardwareVersion: {:?}, firmwareVersion: {:?}, __bindgen_anon_1: {:?}, buildHash: {:?}, configVersion: {:?}, reserved: {:?} }}" , self . iface , self . id , self . vendorName , self . userDefinedName , self . modelName , self . hardwareVersion , self . firmwareVersion , self . __bindgen_anon_1 , self . buildHash , self . configVersion , self . reserved)
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_VISIBILITY_TYPE {
    BEGINNER = 0,
    EXPERT = 1,
    GURU = 2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_FEATURE_INFO {
    #[doc = "< true if feature exists, false otherwise"]
    pub isValid: bool,
    #[doc = "< feature access privilege"]
    pub accessMode: TY_ACCESS_MODE,
    #[doc = "< feature can be written while capturing"]
    pub writableAtRun: bool,
    pub reserved0: [::std::os::raw::c_char; 1usize],
    #[doc = "< owner of this feature"]
    pub componentID: TY_COMPONENT_ID,
    #[doc = "< feature unique id"]
    pub featureID: TY_FEATURE_ID,
    #[doc = "< describe string"]
    pub name: [::std::os::raw::c_char; 32usize],
    #[doc = "< component ID current feature bind to"]
    pub bindComponentID: TY_COMPONENT_ID,
    #[doc = "< feature ID current feature bind to"]
    pub bindFeatureID: TY_FEATURE_ID,
    pub visibility: TY_VISIBILITY_TYPE,
    pub reserved: [::std::os::raw::c_char; 248usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_FEATURE_INFO"][::std::mem::size_of::<TY_FEATURE_INFO>() - 304usize];
    ["Alignment of TY_FEATURE_INFO"][::std::mem::align_of::<TY_FEATURE_INFO>() - 1usize];
    ["Offset of field: TY_FEATURE_INFO::isValid"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, isValid) - 0usize];
    ["Offset of field: TY_FEATURE_INFO::accessMode"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, accessMode) - 1usize];
    ["Offset of field: TY_FEATURE_INFO::writableAtRun"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, writableAtRun) - 2usize];
    ["Offset of field: TY_FEATURE_INFO::reserved0"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, reserved0) - 3usize];
    ["Offset of field: TY_FEATURE_INFO::componentID"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, componentID) - 4usize];
    ["Offset of field: TY_FEATURE_INFO::featureID"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, featureID) - 8usize];
    ["Offset of field: TY_FEATURE_INFO::name"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, name) - 12usize];
    ["Offset of field: TY_FEATURE_INFO::bindComponentID"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, bindComponentID) - 44usize];
    ["Offset of field: TY_FEATURE_INFO::bindFeatureID"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, bindFeatureID) - 48usize];
    ["Offset of field: TY_FEATURE_INFO::visibility"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, visibility) - 52usize];
    ["Offset of field: TY_FEATURE_INFO::reserved"]
        [::std::mem::offset_of!(TY_FEATURE_INFO, reserved) - 56usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_INT_RANGE {
    pub min: i32,
    pub max: i32,
    #[doc = "<increaing step"]
    pub inc: i32,
    pub reserved: [i32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_INT_RANGE"][::std::mem::size_of::<TY_INT_RANGE>() - 16usize];
    ["Alignment of TY_INT_RANGE"][::std::mem::align_of::<TY_INT_RANGE>() - 1usize];
    ["Offset of field: TY_INT_RANGE::min"][::std::mem::offset_of!(TY_INT_RANGE, min) - 0usize];
    ["Offset of field: TY_INT_RANGE::max"][::std::mem::offset_of!(TY_INT_RANGE, max) - 4usize];
    ["Offset of field: TY_INT_RANGE::inc"][::std::mem::offset_of!(TY_INT_RANGE, inc) - 8usize];
    ["Offset of field: TY_INT_RANGE::reserved"]
        [::std::mem::offset_of!(TY_INT_RANGE, reserved) - 12usize];
};
#[doc = " @brief float range data structure\n @see TYGetFloatRange"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_FLOAT_RANGE {
    pub min: f32,
    pub max: f32,
    #[doc = "<increaing step"]
    pub inc: f32,
    pub reserved: [f32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_FLOAT_RANGE"][::std::mem::size_of::<TY_FLOAT_RANGE>() - 16usize];
    ["Alignment of TY_FLOAT_RANGE"][::std::mem::align_of::<TY_FLOAT_RANGE>() - 1usize];
    ["Offset of field: TY_FLOAT_RANGE::min"][::std::mem::offset_of!(TY_FLOAT_RANGE, min) - 0usize];
    ["Offset of field: TY_FLOAT_RANGE::max"][::std::mem::offset_of!(TY_FLOAT_RANGE, max) - 4usize];
    ["Offset of field: TY_FLOAT_RANGE::inc"][::std::mem::offset_of!(TY_FLOAT_RANGE, inc) - 8usize];
    ["Offset of field: TY_FLOAT_RANGE::reserved"]
        [::std::mem::offset_of!(TY_FLOAT_RANGE, reserved) - 12usize];
};
#[doc = " @brief byte array data structure\n @see TYGetByteArray"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_BYTEARRAY_ATTR {
    #[doc = "<Bytes array size in bytes"]
    pub size: i32,
    #[doc = "<unit size in bytes for special parse"]
    pub unit_size: i32,
    #[doc = "valid size in bytes in case has reserved member,\nMust be multiple of unit_size, mem_length = valid_size/unit_size"]
    pub valid_size: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_BYTEARRAY_ATTR"][::std::mem::size_of::<TY_BYTEARRAY_ATTR>() - 12usize];
    ["Alignment of TY_BYTEARRAY_ATTR"][::std::mem::align_of::<TY_BYTEARRAY_ATTR>() - 1usize];
    ["Offset of field: TY_BYTEARRAY_ATTR::size"]
        [::std::mem::offset_of!(TY_BYTEARRAY_ATTR, size) - 0usize];
    ["Offset of field: TY_BYTEARRAY_ATTR::unit_size"]
        [::std::mem::offset_of!(TY_BYTEARRAY_ATTR, unit_size) - 4usize];
    ["Offset of field: TY_BYTEARRAY_ATTR::valid_size"]
        [::std::mem::offset_of!(TY_BYTEARRAY_ATTR, valid_size) - 8usize];
};
#[doc = "enum feature entry information\n@see TYGetEnumEntryInfo"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_ENUM_ENTRY {
    pub description: [::std::os::raw::c_char; 64usize],
    pub value: u32,
    pub reserved: [u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_ENUM_ENTRY"][::std::mem::size_of::<TY_ENUM_ENTRY>() - 80usize];
    ["Alignment of TY_ENUM_ENTRY"][::std::mem::align_of::<TY_ENUM_ENTRY>() - 1usize];
    ["Offset of field: TY_ENUM_ENTRY::description"]
        [::std::mem::offset_of!(TY_ENUM_ENTRY, description) - 0usize];
    ["Offset of field: TY_ENUM_ENTRY::value"]
        [::std::mem::offset_of!(TY_ENUM_ENTRY, value) - 64usize];
    ["Offset of field: TY_ENUM_ENTRY::reserved"]
        [::std::mem::offset_of!(TY_ENUM_ENTRY, reserved) - 68usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_VECT_3F {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_VECT_3F"][::std::mem::size_of::<TY_VECT_3F>() - 12usize];
    ["Alignment of TY_VECT_3F"][::std::mem::align_of::<TY_VECT_3F>() - 1usize];
    ["Offset of field: TY_VECT_3F::x"][::std::mem::offset_of!(TY_VECT_3F, x) - 0usize];
    ["Offset of field: TY_VECT_3F::y"][::std::mem::offset_of!(TY_VECT_3F, y) - 4usize];
    ["Offset of field: TY_VECT_3F::z"][::std::mem::offset_of!(TY_VECT_3F, z) - 8usize];
};
#[doc = "  a 3x3 matrix\n |.|.|.|\n | --|---|---|\n | fx|  0| cx|\n |  0| fy| cy|\n |  0|  0|  1|\n@see TYGetStruct\n Usage:\n@code\n TY_CAMERA_INTRINSIC intrinsic;\n TYGetStruct(hDevice, some_compoent, TY_STRUCT_CAM_INTRINSIC, &intrinsic, sizeof(intrinsic));\n@endcode"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_CAMERA_INTRINSIC {
    pub data: [f32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_CAMERA_INTRINSIC"][::std::mem::size_of::<TY_CAMERA_INTRINSIC>() - 36usize];
    ["Alignment of TY_CAMERA_INTRINSIC"][::std::mem::align_of::<TY_CAMERA_INTRINSIC>() - 1usize];
    ["Offset of field: TY_CAMERA_INTRINSIC::data"]
        [::std::mem::offset_of!(TY_CAMERA_INTRINSIC, data) - 0usize];
};
#[doc = " a 4x4 matrix\n  |.|.|.|.|\n  |---|----|----|---|\n  |r11| r12| r13| t1|\n  |r21| r22| r23| t2|\n  |r31| r32| r33| t3|\n  | 0 |   0|   0|  1|\n@see TYGetStruct\n Usage:\n@code\n TY_CAMERA_EXTRINSIC extrinsic;\n TYGetStruct(hDevice, some_compoent, TY_STRUCT_EXTRINSIC, &extrinsic, sizeof(extrinsic));\n@endcode"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_CAMERA_EXTRINSIC {
    pub data: [f32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_CAMERA_EXTRINSIC"][::std::mem::size_of::<TY_CAMERA_EXTRINSIC>() - 64usize];
    ["Alignment of TY_CAMERA_EXTRINSIC"][::std::mem::align_of::<TY_CAMERA_EXTRINSIC>() - 1usize];
    ["Offset of field: TY_CAMERA_EXTRINSIC::data"]
        [::std::mem::offset_of!(TY_CAMERA_EXTRINSIC, data) - 0usize];
};
#[doc = "camera distortion parameters\n @see TYGetStruct\n Usage:\n@code\n TY_CAMERA_DISTORTION distortion;\n TYGetStruct(hDevice, some_compoent, TY_STRUCT_CAM_DISTORTION, &distortion, sizeof(distortion));\n@endcode"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_CAMERA_DISTORTION {
    #[doc = "<Definition is compatible with opencv3.0+ :k1,k2,p1,p2,k3,k4,k5,k6,s1,s2,s3,s4"]
    pub data: [f32; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_CAMERA_DISTORTION"][::std::mem::size_of::<TY_CAMERA_DISTORTION>() - 48usize];
    ["Alignment of TY_CAMERA_DISTORTION"][::std::mem::align_of::<TY_CAMERA_DISTORTION>() - 1usize];
    ["Offset of field: TY_CAMERA_DISTORTION::data"]
        [::std::mem::offset_of!(TY_CAMERA_DISTORTION, data) - 0usize];
};
#[doc = "camera 's cailbration data\n@see TYGetStruct"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_CAMERA_CALIB_INFO {
    pub intrinsicWidth: i32,
    pub intrinsicHeight: i32,
    pub intrinsic: TY_CAMERA_INTRINSIC,
    pub extrinsic: TY_CAMERA_EXTRINSIC,
    pub distortion: TY_CAMERA_DISTORTION,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_CAMERA_CALIB_INFO"][::std::mem::size_of::<TY_CAMERA_CALIB_INFO>() - 156usize];
    ["Alignment of TY_CAMERA_CALIB_INFO"][::std::mem::align_of::<TY_CAMERA_CALIB_INFO>() - 1usize];
    ["Offset of field: TY_CAMERA_CALIB_INFO::intrinsicWidth"]
        [::std::mem::offset_of!(TY_CAMERA_CALIB_INFO, intrinsicWidth) - 0usize];
    ["Offset of field: TY_CAMERA_CALIB_INFO::intrinsicHeight"]
        [::std::mem::offset_of!(TY_CAMERA_CALIB_INFO, intrinsicHeight) - 4usize];
    ["Offset of field: TY_CAMERA_CALIB_INFO::intrinsic"]
        [::std::mem::offset_of!(TY_CAMERA_CALIB_INFO, intrinsic) - 8usize];
    ["Offset of field: TY_CAMERA_CALIB_INFO::extrinsic"]
        [::std::mem::offset_of!(TY_CAMERA_CALIB_INFO, extrinsic) - 44usize];
    ["Offset of field: TY_CAMERA_CALIB_INFO::distortion"]
        [::std::mem::offset_of!(TY_CAMERA_CALIB_INFO, distortion) - 108usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_TRIGGER_PARAM {
    pub mode: TY_TRIGGER_MODE,
    pub fps: i8,
    pub rsvd: i8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TRIGGER_PARAM"][::std::mem::size_of::<TY_TRIGGER_PARAM>() - 4usize];
    ["Alignment of TY_TRIGGER_PARAM"][::std::mem::align_of::<TY_TRIGGER_PARAM>() - 1usize];
    ["Offset of field: TY_TRIGGER_PARAM::mode"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM, mode) - 0usize];
    ["Offset of field: TY_TRIGGER_PARAM::fps"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM, fps) - 2usize];
    ["Offset of field: TY_TRIGGER_PARAM::rsvd"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM, rsvd) - 3usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct TY_TRIGGER_PARAM_EX {
    pub mode: TY_TRIGGER_MODE,
    pub __bindgen_anon_1: TY_TRIGGER_PARAM_EX__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union TY_TRIGGER_PARAM_EX__bindgen_ty_1 {
    pub __bindgen_anon_1: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2,
    pub rsvd: [i32; 32usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1 {
    pub fps: i8,
    pub duty: i8,
    pub laser_stream: i32,
    pub led_stream: i32,
    pub led_expo: i32,
    pub led_gain: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1>() - 18usize];
    ["Alignment of TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1::fps"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1, fps) - 0usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1::duty"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1, duty) - 1usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1::laser_stream"][::std::mem::offset_of!(
        TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1,
        laser_stream
    ) - 2usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1::led_stream"][::std::mem::offset_of!(
        TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1,
        led_stream
    ) - 6usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1::led_expo"][::std::mem::offset_of!(
        TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1,
        led_expo
    ) - 10usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1::led_gain"][::std::mem::offset_of!(
        TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_1,
        led_gain
    ) - 14usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2 {
    pub ir_gain: [i32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2::ir_gain"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM_EX__bindgen_ty_1__bindgen_ty_2, ir_gain) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TRIGGER_PARAM_EX__bindgen_ty_1"]
        [::std::mem::size_of::<TY_TRIGGER_PARAM_EX__bindgen_ty_1>() - 128usize];
    ["Alignment of TY_TRIGGER_PARAM_EX__bindgen_ty_1"]
        [::std::mem::align_of::<TY_TRIGGER_PARAM_EX__bindgen_ty_1>() - 1usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX__bindgen_ty_1::rsvd"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM_EX__bindgen_ty_1, rsvd) - 0usize];
};
impl ::std::fmt::Debug for TY_TRIGGER_PARAM_EX__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "TY_TRIGGER_PARAM_EX__bindgen_ty_1 {{ union }}")
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TRIGGER_PARAM_EX"][::std::mem::size_of::<TY_TRIGGER_PARAM_EX>() - 130usize];
    ["Alignment of TY_TRIGGER_PARAM_EX"][::std::mem::align_of::<TY_TRIGGER_PARAM_EX>() - 1usize];
    ["Offset of field: TY_TRIGGER_PARAM_EX::mode"]
        [::std::mem::offset_of!(TY_TRIGGER_PARAM_EX, mode) - 0usize];
};
impl ::std::fmt::Debug for TY_TRIGGER_PARAM_EX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "TY_TRIGGER_PARAM_EX {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_TRIGGER_TIMER_LIST {
    pub start_time_us: u64,
    pub offset_us_count: u32,
    pub offset_us_list: [u32; 50usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TRIGGER_TIMER_LIST"][::std::mem::size_of::<TY_TRIGGER_TIMER_LIST>() - 212usize];
    ["Alignment of TY_TRIGGER_TIMER_LIST"]
        [::std::mem::align_of::<TY_TRIGGER_TIMER_LIST>() - 1usize];
    ["Offset of field: TY_TRIGGER_TIMER_LIST::start_time_us"]
        [::std::mem::offset_of!(TY_TRIGGER_TIMER_LIST, start_time_us) - 0usize];
    ["Offset of field: TY_TRIGGER_TIMER_LIST::offset_us_count"]
        [::std::mem::offset_of!(TY_TRIGGER_TIMER_LIST, offset_us_count) - 8usize];
    ["Offset of field: TY_TRIGGER_TIMER_LIST::offset_us_list"]
        [::std::mem::offset_of!(TY_TRIGGER_TIMER_LIST, offset_us_list) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_TRIGGER_TIMER_PERIOD {
    pub start_time_us: u64,
    pub trigger_count: u32,
    pub period_us: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TRIGGER_TIMER_PERIOD"][::std::mem::size_of::<TY_TRIGGER_TIMER_PERIOD>() - 16usize];
    ["Alignment of TY_TRIGGER_TIMER_PERIOD"]
        [::std::mem::align_of::<TY_TRIGGER_TIMER_PERIOD>() - 1usize];
    ["Offset of field: TY_TRIGGER_TIMER_PERIOD::start_time_us"]
        [::std::mem::offset_of!(TY_TRIGGER_TIMER_PERIOD, start_time_us) - 0usize];
    ["Offset of field: TY_TRIGGER_TIMER_PERIOD::trigger_count"]
        [::std::mem::offset_of!(TY_TRIGGER_TIMER_PERIOD, trigger_count) - 8usize];
    ["Offset of field: TY_TRIGGER_TIMER_PERIOD::period_us"]
        [::std::mem::offset_of!(TY_TRIGGER_TIMER_PERIOD, period_us) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_AEC_ROI_PARAM {
    pub x: u32,
    pub y: u32,
    pub w: u32,
    pub h: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_AEC_ROI_PARAM"][::std::mem::size_of::<TY_AEC_ROI_PARAM>() - 16usize];
    ["Alignment of TY_AEC_ROI_PARAM"][::std::mem::align_of::<TY_AEC_ROI_PARAM>() - 1usize];
    ["Offset of field: TY_AEC_ROI_PARAM::x"][::std::mem::offset_of!(TY_AEC_ROI_PARAM, x) - 0usize];
    ["Offset of field: TY_AEC_ROI_PARAM::y"][::std::mem::offset_of!(TY_AEC_ROI_PARAM, y) - 4usize];
    ["Offset of field: TY_AEC_ROI_PARAM::w"][::std::mem::offset_of!(TY_AEC_ROI_PARAM, w) - 8usize];
    ["Offset of field: TY_AEC_ROI_PARAM::h"][::std::mem::offset_of!(TY_AEC_ROI_PARAM, h) - 12usize];
};
pub const TY_PATTERN_SINE_TYPE: _bindgen_ty_1 = _bindgen_ty_1::TY_PATTERN_SINE_TYPE;
pub const TY_PATTERN_GRAY_TYPE: _bindgen_ty_1 = _bindgen_ty_1::TY_PATTERN_GRAY_TYPE;
pub const TY_PATTERN_BIN_TYPE: _bindgen_ty_1 = _bindgen_ty_1::TY_PATTERN_BIN_TYPE;
pub const TY_PATTERN_EMPTY_TYPE: _bindgen_ty_1 = _bindgen_ty_1::TY_PATTERN_EMPTY_TYPE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    TY_PATTERN_SINE_TYPE = 0,
    TY_PATTERN_GRAY_TYPE = 1,
    TY_PATTERN_BIN_TYPE = 2,
    TY_PATTERN_EMPTY_TYPE = 4294967295,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_PHC_GROUP_ATTR {
    pub offset: u32,
    pub size: u32,
    pub phc_attr: [TY_PHC_GROUP_ATTR_phc_group_attr; 16usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_PHC_GROUP_ATTR_phc_group_attr {
    pub type_: u8,
    pub amp_thresh: u8,
    pub ch: u16,
    pub chn_type: u8,
    pub rsvd: [u8; 27usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_PHC_GROUP_ATTR_phc_group_attr"]
        [::std::mem::size_of::<TY_PHC_GROUP_ATTR_phc_group_attr>() - 32usize];
    ["Alignment of TY_PHC_GROUP_ATTR_phc_group_attr"]
        [::std::mem::align_of::<TY_PHC_GROUP_ATTR_phc_group_attr>() - 1usize];
    ["Offset of field: TY_PHC_GROUP_ATTR_phc_group_attr::type_"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR_phc_group_attr, type_) - 0usize];
    ["Offset of field: TY_PHC_GROUP_ATTR_phc_group_attr::amp_thresh"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR_phc_group_attr, amp_thresh) - 1usize];
    ["Offset of field: TY_PHC_GROUP_ATTR_phc_group_attr::ch"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR_phc_group_attr, ch) - 2usize];
    ["Offset of field: TY_PHC_GROUP_ATTR_phc_group_attr::chn_type"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR_phc_group_attr, chn_type) - 4usize];
    ["Offset of field: TY_PHC_GROUP_ATTR_phc_group_attr::rsvd"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR_phc_group_attr, rsvd) - 5usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_PHC_GROUP_ATTR"][::std::mem::size_of::<TY_PHC_GROUP_ATTR>() - 520usize];
    ["Alignment of TY_PHC_GROUP_ATTR"][::std::mem::align_of::<TY_PHC_GROUP_ATTR>() - 1usize];
    ["Offset of field: TY_PHC_GROUP_ATTR::offset"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR, offset) - 0usize];
    ["Offset of field: TY_PHC_GROUP_ATTR::size"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR, size) - 4usize];
    ["Offset of field: TY_PHC_GROUP_ATTR::phc_attr"]
        [::std::mem::offset_of!(TY_PHC_GROUP_ATTR, phc_attr) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pattern_sine_param {
    pub phase_num: u32,
    pub period: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pattern_sine_param"][::std::mem::size_of::<pattern_sine_param>() - 8usize];
    ["Alignment of pattern_sine_param"][::std::mem::align_of::<pattern_sine_param>() - 1usize];
    ["Offset of field: pattern_sine_param::phase_num"]
        [::std::mem::offset_of!(pattern_sine_param, phase_num) - 0usize];
    ["Offset of field: pattern_sine_param::period"]
        [::std::mem::offset_of!(pattern_sine_param, period) - 4usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pattern_gray_param {
    pub phase_num: u32,
    pub param1: u32,
    pub param2: u32,
    pub param3: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pattern_gray_param"][::std::mem::size_of::<pattern_gray_param>() - 16usize];
    ["Alignment of pattern_gray_param"][::std::mem::align_of::<pattern_gray_param>() - 1usize];
    ["Offset of field: pattern_gray_param::phase_num"]
        [::std::mem::offset_of!(pattern_gray_param, phase_num) - 0usize];
    ["Offset of field: pattern_gray_param::param1"]
        [::std::mem::offset_of!(pattern_gray_param, param1) - 4usize];
    ["Offset of field: pattern_gray_param::param2"]
        [::std::mem::offset_of!(pattern_gray_param, param2) - 8usize];
    ["Offset of field: pattern_gray_param::param3"]
        [::std::mem::offset_of!(pattern_gray_param, param3) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pattern_bin_param {
    pub offset: u32,
    pub data: [u8; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pattern_bin_param"][::std::mem::size_of::<pattern_bin_param>() - 516usize];
    ["Alignment of pattern_bin_param"][::std::mem::align_of::<pattern_bin_param>() - 1usize];
    ["Offset of field: pattern_bin_param::offset"]
        [::std::mem::offset_of!(pattern_bin_param, offset) - 0usize];
    ["Offset of field: pattern_bin_param::data"]
        [::std::mem::offset_of!(pattern_bin_param, data) - 4usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct TY_LASER_PATTERN_PARAM {
    pub img_index: u32,
    pub type_: u32,
    pub __bindgen_anon_1: TY_LASER_PATTERN_PARAM__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TY_LASER_PATTERN_PARAM__bindgen_ty_1 {
    pub payload: [u8; 528usize],
    pub sine_param: pattern_sine_param,
    pub gray_param: pattern_gray_param,
    pub bin: pattern_bin_param,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_LASER_PATTERN_PARAM__bindgen_ty_1"]
        [::std::mem::size_of::<TY_LASER_PATTERN_PARAM__bindgen_ty_1>() - 528usize];
    ["Alignment of TY_LASER_PATTERN_PARAM__bindgen_ty_1"]
        [::std::mem::align_of::<TY_LASER_PATTERN_PARAM__bindgen_ty_1>() - 1usize];
    ["Offset of field: TY_LASER_PATTERN_PARAM__bindgen_ty_1::payload"]
        [::std::mem::offset_of!(TY_LASER_PATTERN_PARAM__bindgen_ty_1, payload) - 0usize];
    ["Offset of field: TY_LASER_PATTERN_PARAM__bindgen_ty_1::sine_param"]
        [::std::mem::offset_of!(TY_LASER_PATTERN_PARAM__bindgen_ty_1, sine_param) - 0usize];
    ["Offset of field: TY_LASER_PATTERN_PARAM__bindgen_ty_1::gray_param"]
        [::std::mem::offset_of!(TY_LASER_PATTERN_PARAM__bindgen_ty_1, gray_param) - 0usize];
    ["Offset of field: TY_LASER_PATTERN_PARAM__bindgen_ty_1::bin"]
        [::std::mem::offset_of!(TY_LASER_PATTERN_PARAM__bindgen_ty_1, bin) - 0usize];
};
impl ::std::fmt::Debug for TY_LASER_PATTERN_PARAM__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "TY_LASER_PATTERN_PARAM__bindgen_ty_1 {{ union }}")
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_LASER_PATTERN_PARAM"][::std::mem::size_of::<TY_LASER_PATTERN_PARAM>() - 536usize];
    ["Alignment of TY_LASER_PATTERN_PARAM"]
        [::std::mem::align_of::<TY_LASER_PATTERN_PARAM>() - 1usize];
    ["Offset of field: TY_LASER_PATTERN_PARAM::img_index"]
        [::std::mem::offset_of!(TY_LASER_PATTERN_PARAM, img_index) - 0usize];
    ["Offset of field: TY_LASER_PATTERN_PARAM::type_"]
        [::std::mem::offset_of!(TY_LASER_PATTERN_PARAM, type_) - 4usize];
};
impl ::std::fmt::Debug for TY_LASER_PATTERN_PARAM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "TY_LASER_PATTERN_PARAM {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
pub const TY_NORMAL_PHASE_TYPE: _bindgen_ty_2 = _bindgen_ty_2::TY_NORMAL_PHASE_TYPE;
pub const TY_REFER_PHASE_TYPE: _bindgen_ty_2 = _bindgen_ty_2::TY_REFER_PHASE_TYPE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    TY_NORMAL_PHASE_TYPE = 0,
    TY_REFER_PHASE_TYPE = 1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_CAMERA_STATISTICS {
    pub packetReceived: u64,
    pub packetLost: u64,
    pub imageOutputed: u64,
    pub imageDropped: u64,
    pub rsvd: [u8; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_CAMERA_STATISTICS"][::std::mem::size_of::<TY_CAMERA_STATISTICS>() - 1056usize];
    ["Alignment of TY_CAMERA_STATISTICS"][::std::mem::align_of::<TY_CAMERA_STATISTICS>() - 1usize];
    ["Offset of field: TY_CAMERA_STATISTICS::packetReceived"]
        [::std::mem::offset_of!(TY_CAMERA_STATISTICS, packetReceived) - 0usize];
    ["Offset of field: TY_CAMERA_STATISTICS::packetLost"]
        [::std::mem::offset_of!(TY_CAMERA_STATISTICS, packetLost) - 8usize];
    ["Offset of field: TY_CAMERA_STATISTICS::imageOutputed"]
        [::std::mem::offset_of!(TY_CAMERA_STATISTICS, imageOutputed) - 16usize];
    ["Offset of field: TY_CAMERA_STATISTICS::imageDropped"]
        [::std::mem::offset_of!(TY_CAMERA_STATISTICS, imageDropped) - 24usize];
    ["Offset of field: TY_CAMERA_STATISTICS::rsvd"]
        [::std::mem::offset_of!(TY_CAMERA_STATISTICS, rsvd) - 32usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_IMU_DATA {
    pub timestamp: u64,
    pub acc_x: f32,
    pub acc_y: f32,
    pub acc_z: f32,
    pub gyro_x: f32,
    pub gyro_y: f32,
    pub gyro_z: f32,
    pub temperature: f32,
    pub reserved: [f32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_IMU_DATA"][::std::mem::size_of::<TY_IMU_DATA>() - 40usize];
    ["Alignment of TY_IMU_DATA"][::std::mem::align_of::<TY_IMU_DATA>() - 1usize];
    ["Offset of field: TY_IMU_DATA::timestamp"]
        [::std::mem::offset_of!(TY_IMU_DATA, timestamp) - 0usize];
    ["Offset of field: TY_IMU_DATA::acc_x"][::std::mem::offset_of!(TY_IMU_DATA, acc_x) - 8usize];
    ["Offset of field: TY_IMU_DATA::acc_y"][::std::mem::offset_of!(TY_IMU_DATA, acc_y) - 12usize];
    ["Offset of field: TY_IMU_DATA::acc_z"][::std::mem::offset_of!(TY_IMU_DATA, acc_z) - 16usize];
    ["Offset of field: TY_IMU_DATA::gyro_x"][::std::mem::offset_of!(TY_IMU_DATA, gyro_x) - 20usize];
    ["Offset of field: TY_IMU_DATA::gyro_y"][::std::mem::offset_of!(TY_IMU_DATA, gyro_y) - 24usize];
    ["Offset of field: TY_IMU_DATA::gyro_z"][::std::mem::offset_of!(TY_IMU_DATA, gyro_z) - 28usize];
    ["Offset of field: TY_IMU_DATA::temperature"]
        [::std::mem::offset_of!(TY_IMU_DATA, temperature) - 32usize];
    ["Offset of field: TY_IMU_DATA::reserved"]
        [::std::mem::offset_of!(TY_IMU_DATA, reserved) - 36usize];
};
#[doc = "  a 3x3 matrix\n |.|.|.|\n | --    |   ---- |   --- |\n | BIASx | BIASy  | BIASz |"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_ACC_BIAS {
    pub data: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_ACC_BIAS"][::std::mem::size_of::<TY_ACC_BIAS>() - 12usize];
    ["Alignment of TY_ACC_BIAS"][::std::mem::align_of::<TY_ACC_BIAS>() - 1usize];
    ["Offset of field: TY_ACC_BIAS::data"][::std::mem::offset_of!(TY_ACC_BIAS, data) - 0usize];
};
#[doc = "  a 3x3 matrix\n |.|.|.|\n |.|.|.|\n | --     |   ----  |   ----  |\n | 1      | -GAMAyz | GAMAzy  |\n | GAMAxz | 1       | -GAMAzx |\n | -GAMAxy| GAMAyx  | 1       |"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_ACC_MISALIGNMENT {
    pub data: [f32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_ACC_MISALIGNMENT"][::std::mem::size_of::<TY_ACC_MISALIGNMENT>() - 36usize];
    ["Alignment of TY_ACC_MISALIGNMENT"][::std::mem::align_of::<TY_ACC_MISALIGNMENT>() - 1usize];
    ["Offset of field: TY_ACC_MISALIGNMENT::data"]
        [::std::mem::offset_of!(TY_ACC_MISALIGNMENT, data) - 0usize];
};
#[doc = "  a 3x3 matrix\n |.|.|.|\n | ----  |----  |----   |\n | SCALEx|  0   | 0     |\n |  0    |SCALEy| 0     |\n |  0    |  0   | SCALEz|"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_ACC_SCALE {
    pub data: [f32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_ACC_SCALE"][::std::mem::size_of::<TY_ACC_SCALE>() - 36usize];
    ["Alignment of TY_ACC_SCALE"][::std::mem::align_of::<TY_ACC_SCALE>() - 1usize];
    ["Offset of field: TY_ACC_SCALE::data"][::std::mem::offset_of!(TY_ACC_SCALE, data) - 0usize];
};
#[doc = "  a 3x3 matrix\n |.|.|.|\n | --    |   ---- |   --- |\n | BIASx | BIASy  | BIASz |"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_GYRO_BIAS {
    pub data: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_GYRO_BIAS"][::std::mem::size_of::<TY_GYRO_BIAS>() - 12usize];
    ["Alignment of TY_GYRO_BIAS"][::std::mem::align_of::<TY_GYRO_BIAS>() - 1usize];
    ["Offset of field: TY_GYRO_BIAS::data"][::std::mem::offset_of!(TY_GYRO_BIAS, data) - 0usize];
};
#[doc = "  a 3x3 matrix\n |.|.|.|\n | --|   ----  |   ----   |\n | 1 | -ALPHAyz| ALPHAzy  |\n | 0 | 1       | -ALPHAzx |\n | 0 | 0       | 1        |"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_GYRO_MISALIGNMENT {
    pub data: [f32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_GYRO_MISALIGNMENT"][::std::mem::size_of::<TY_GYRO_MISALIGNMENT>() - 36usize];
    ["Alignment of TY_GYRO_MISALIGNMENT"][::std::mem::align_of::<TY_GYRO_MISALIGNMENT>() - 1usize];
    ["Offset of field: TY_GYRO_MISALIGNMENT::data"]
        [::std::mem::offset_of!(TY_GYRO_MISALIGNMENT, data) - 0usize];
};
#[doc = "  a 3x3 matrix\n |.|.|.|\n | ----  |----  |----   |\n | SCALEx|  0   | 0     |\n |  0    |SCALEy| 0     |\n |  0    |  0   | SCALEz|"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_GYRO_SCALE {
    pub data: [f32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_GYRO_SCALE"][::std::mem::size_of::<TY_GYRO_SCALE>() - 36usize];
    ["Alignment of TY_GYRO_SCALE"][::std::mem::align_of::<TY_GYRO_SCALE>() - 1usize];
    ["Offset of field: TY_GYRO_SCALE::data"][::std::mem::offset_of!(TY_GYRO_SCALE, data) - 0usize];
};
#[doc = " a 4x4 matrix\n  |.|.|.|.|\n  |---|----|----|---|\n  |r11| r12| r13| t1|\n  |r21| r22| r23| t2|\n  |r31| r32| r33| t3|\n  | 0 |   0|   0|  1|"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_CAMERA_TO_IMU {
    pub data: [f32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_CAMERA_TO_IMU"][::std::mem::size_of::<TY_CAMERA_TO_IMU>() - 64usize];
    ["Alignment of TY_CAMERA_TO_IMU"][::std::mem::align_of::<TY_CAMERA_TO_IMU>() - 1usize];
    ["Offset of field: TY_CAMERA_TO_IMU::data"]
        [::std::mem::offset_of!(TY_CAMERA_TO_IMU, data) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_TOF_FREQ {
    pub freq1: u32,
    pub freq2: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_TOF_FREQ"][::std::mem::size_of::<TY_TOF_FREQ>() - 8usize];
    ["Alignment of TY_TOF_FREQ"][::std::mem::align_of::<TY_TOF_FREQ>() - 1usize];
    ["Offset of field: TY_TOF_FREQ::freq1"][::std::mem::offset_of!(TY_TOF_FREQ, freq1) - 0usize];
    ["Offset of field: TY_TOF_FREQ::freq2"][::std::mem::offset_of!(TY_TOF_FREQ, freq2) - 4usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_IMU_FPS_LIST {
    TY_IMU_FPS_100HZ = 0,
    TY_IMU_FPS_200HZ = 1,
    TY_IMU_FPS_400HZ = 2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_LASER_PARAM {
    pub idx: u32,
    pub en: u32,
    pub power: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_LASER_PARAM"][::std::mem::size_of::<TY_LASER_PARAM>() - 12usize];
    ["Alignment of TY_LASER_PARAM"][::std::mem::align_of::<TY_LASER_PARAM>() - 1usize];
    ["Offset of field: TY_LASER_PARAM::idx"][::std::mem::offset_of!(TY_LASER_PARAM, idx) - 0usize];
    ["Offset of field: TY_LASER_PARAM::en"][::std::mem::offset_of!(TY_LASER_PARAM, en) - 4usize];
    ["Offset of field: TY_LASER_PARAM::power"]
        [::std::mem::offset_of!(TY_LASER_PARAM, power) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_IMAGE_DATA {
    #[doc = "< Timestamp in microseconds"]
    pub timestamp: u64,
    #[doc = "< image index used in trigger mode"]
    pub imageIndex: i32,
    #[doc = "< Status of this buffer"]
    pub status: i32,
    #[doc = "< Where current data come from"]
    pub componentID: TY_COMPONENT_ID,
    #[doc = "< Buffer size"]
    pub size: i32,
    #[doc = "< Pointer to data buffer"]
    pub buffer: *mut ::std::os::raw::c_void,
    #[doc = "< Image width in pixels"]
    pub width: i32,
    #[doc = "< Image height in pixels"]
    pub height: i32,
    #[doc = "< Pixel format, see TY_PIXEL_FORMAT_LIST"]
    pub pixelFormat: TY_PIXEL_FORMAT,
    #[doc = "< Reserved"]
    pub reserved: [i32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_IMAGE_DATA"][::std::mem::size_of::<TY_IMAGE_DATA>() - 80usize];
    ["Alignment of TY_IMAGE_DATA"][::std::mem::align_of::<TY_IMAGE_DATA>() - 1usize];
    ["Offset of field: TY_IMAGE_DATA::timestamp"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, timestamp) - 0usize];
    ["Offset of field: TY_IMAGE_DATA::imageIndex"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, imageIndex) - 8usize];
    ["Offset of field: TY_IMAGE_DATA::status"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, status) - 12usize];
    ["Offset of field: TY_IMAGE_DATA::componentID"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, componentID) - 16usize];
    ["Offset of field: TY_IMAGE_DATA::size"][::std::mem::offset_of!(TY_IMAGE_DATA, size) - 20usize];
    ["Offset of field: TY_IMAGE_DATA::buffer"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, buffer) - 24usize];
    ["Offset of field: TY_IMAGE_DATA::width"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, width) - 32usize];
    ["Offset of field: TY_IMAGE_DATA::height"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, height) - 36usize];
    ["Offset of field: TY_IMAGE_DATA::pixelFormat"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, pixelFormat) - 40usize];
    ["Offset of field: TY_IMAGE_DATA::reserved"]
        [::std::mem::offset_of!(TY_IMAGE_DATA, reserved) - 44usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_FRAME_DATA {
    #[doc = "< Pointer to user enqueued buffer, user should enqueue this buffer in the end of callback"]
    pub userBuffer: *mut ::std::os::raw::c_void,
    #[doc = "< Size of userBuffer"]
    pub bufferSize: i32,
    #[doc = "< Number of valid data"]
    pub validCount: i32,
    #[doc = "< Reserved: reserved[0],laser_val;"]
    pub reserved: [i32; 6usize],
    #[doc = "< Buffer data, max to 10 images per frame, each buffer data could be an image or something else."]
    pub image: [TY_IMAGE_DATA; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_FRAME_DATA"][::std::mem::size_of::<TY_FRAME_DATA>() - 840usize];
    ["Alignment of TY_FRAME_DATA"][::std::mem::align_of::<TY_FRAME_DATA>() - 1usize];
    ["Offset of field: TY_FRAME_DATA::userBuffer"]
        [::std::mem::offset_of!(TY_FRAME_DATA, userBuffer) - 0usize];
    ["Offset of field: TY_FRAME_DATA::bufferSize"]
        [::std::mem::offset_of!(TY_FRAME_DATA, bufferSize) - 8usize];
    ["Offset of field: TY_FRAME_DATA::validCount"]
        [::std::mem::offset_of!(TY_FRAME_DATA, validCount) - 12usize];
    ["Offset of field: TY_FRAME_DATA::reserved"]
        [::std::mem::offset_of!(TY_FRAME_DATA, reserved) - 16usize];
    ["Offset of field: TY_FRAME_DATA::image"]
        [::std::mem::offset_of!(TY_FRAME_DATA, image) - 40usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_EVENT_INFO {
    pub eventId: TY_EVENT,
    pub message: [::std::os::raw::c_char; 124usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_EVENT_INFO"][::std::mem::size_of::<TY_EVENT_INFO>() - 128usize];
    ["Alignment of TY_EVENT_INFO"][::std::mem::align_of::<TY_EVENT_INFO>() - 1usize];
    ["Offset of field: TY_EVENT_INFO::eventId"]
        [::std::mem::offset_of!(TY_EVENT_INFO, eventId) - 0usize];
    ["Offset of field: TY_EVENT_INFO::message"]
        [::std::mem::offset_of!(TY_EVENT_INFO, message) - 4usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_DO_WORKMODE {
    pub mode: TY_E_DO_MODE,
    pub volt: TY_E_VOLT_T,
    pub freq: u32,
    pub duty: u32,
    pub mode_supported: u32,
    pub volt_supported: u32,
    pub reserved: [u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_DO_WORKMODE"][::std::mem::size_of::<TY_DO_WORKMODE>() - 36usize];
    ["Alignment of TY_DO_WORKMODE"][::std::mem::align_of::<TY_DO_WORKMODE>() - 1usize];
    ["Offset of field: TY_DO_WORKMODE::mode"]
        [::std::mem::offset_of!(TY_DO_WORKMODE, mode) - 0usize];
    ["Offset of field: TY_DO_WORKMODE::volt"]
        [::std::mem::offset_of!(TY_DO_WORKMODE, volt) - 4usize];
    ["Offset of field: TY_DO_WORKMODE::freq"]
        [::std::mem::offset_of!(TY_DO_WORKMODE, freq) - 8usize];
    ["Offset of field: TY_DO_WORKMODE::duty"]
        [::std::mem::offset_of!(TY_DO_WORKMODE, duty) - 12usize];
    ["Offset of field: TY_DO_WORKMODE::mode_supported"]
        [::std::mem::offset_of!(TY_DO_WORKMODE, mode_supported) - 16usize];
    ["Offset of field: TY_DO_WORKMODE::volt_supported"]
        [::std::mem::offset_of!(TY_DO_WORKMODE, volt_supported) - 20usize];
    ["Offset of field: TY_DO_WORKMODE::reserved"]
        [::std::mem::offset_of!(TY_DO_WORKMODE, reserved) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TY_DI_WORKMODE {
    pub mode: TY_E_DI_MODE,
    pub int_act: TY_E_DI_INT_ACTION,
    pub mode_supported: u32,
    pub int_act_supported: u32,
    pub status: u32,
    pub reserved: [u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_DI_WORKMODE"][::std::mem::size_of::<TY_DI_WORKMODE>() - 32usize];
    ["Alignment of TY_DI_WORKMODE"][::std::mem::align_of::<TY_DI_WORKMODE>() - 1usize];
    ["Offset of field: TY_DI_WORKMODE::mode"]
        [::std::mem::offset_of!(TY_DI_WORKMODE, mode) - 0usize];
    ["Offset of field: TY_DI_WORKMODE::int_act"]
        [::std::mem::offset_of!(TY_DI_WORKMODE, int_act) - 4usize];
    ["Offset of field: TY_DI_WORKMODE::mode_supported"]
        [::std::mem::offset_of!(TY_DI_WORKMODE, mode_supported) - 8usize];
    ["Offset of field: TY_DI_WORKMODE::int_act_supported"]
        [::std::mem::offset_of!(TY_DI_WORKMODE, int_act_supported) - 12usize];
    ["Offset of field: TY_DI_WORKMODE::status"]
        [::std::mem::offset_of!(TY_DI_WORKMODE, status) - 16usize];
    ["Offset of field: TY_DI_WORKMODE::reserved"]
        [::std::mem::offset_of!(TY_DI_WORKMODE, reserved) - 20usize];
};
pub type TY_EVENT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut TY_EVENT_INFO, userdata: *mut ::std::os::raw::c_void),
>;
pub type TY_IMU_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut TY_IMU_DATA, userdata: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    #[doc = " @brief Get error information.\n @param  [in]  errorID       Error id.\n @return Error string."]
    pub fn TYErrorString(errorID: TY_STATUS) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Deinit this library.\n @retval TY_STATUS_OK        Succeed."]
    pub fn TYDeinitLib() -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get current library version.\n @param  [out] version       Version infomation to be filled.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NULL_POINTER      buffer is NULL."]
    pub fn TYLibVersion(version: *mut TY_VERSION_INFO) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Update current interfaces.\n call before TYGetInterfaceList\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called."]
    pub fn TYUpdateInterfaceList() -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get number of current interfaces.\n @param  [out] pNumIfaces    Number of interfaces.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_NULL_POINTER      deviceNumber is NULL."]
    pub fn TYGetInterfaceNumber(pNumIfaces: *mut u32) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get interface info list.\n @param  [out] pIfaceInfos   Array of interface infos to be filled.\n @param  [in]  bufferCount   Array size of interface infos.\n @param  [out] filledCount   Number of filled TY_INTERFACE_INFO.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_NULL_POINTER      pIfaceInfos or filledCount is NULL."]
    pub fn TYGetInterfaceList(
        pIfaceInfos: *mut TY_INTERFACE_INFO,
        bufferCount: u32,
        filledCount: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Check if has interface.\n @param  [in]  ifaceID       Interface ID string, can be get from TY_INTERFACE_INFO.\n @param  [out] value         True if the interface exists.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_NULL_POINTER      ifaceID or outHandle is NULL.\n @see TYGetInterfaceList"]
    pub fn TYHasInterface(ifaceID: *const ::std::os::raw::c_char, value: *mut bool) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Open specified interface.\n @param  [in]  ifaceID       Interface ID string, can be get from TY_INTERFACE_INFO.\n @param  [out] outHandle     Handle of opened interface.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_NULL_POINTER      ifaceID or outHandle is NULL.\n @retval TY_STATUS_INVALID_INTERFACE Interface not found.\n @see TYGetInterfaceList"]
    pub fn TYOpenInterface(
        ifaceID: *const ::std::os::raw::c_char,
        outHandle: *mut TY_INTERFACE_HANDLE,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Close interface.\n @param  [in]  ifaceHandle   Interface to be closed.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Interface not found."]
    pub fn TYCloseInterface(ifaceHandle: TY_INTERFACE_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Update current connected devices.\n @param  [in]  ifaceHandle   Interface handle.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Invalid interface handle."]
    pub fn TYUpdateDeviceList(ifaceHandle: TY_INTERFACE_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Update current connected devices.\n @retval TY_STATUS_OK                Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called."]
    pub fn TYUpdateAllDeviceList() -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get number of current connected devices.\n @param  [in]  ifaceHandle   Interface handle.\n @param  [out] deviceNumber  Number of connected devices.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Invalid interface handle.\n @retval TY_STATUS_NULL_POINTER      deviceNumber is NULL."]
    pub fn TYGetDeviceNumber(ifaceHandle: TY_INTERFACE_HANDLE, deviceNumber: *mut u32)
        -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get device info list.\n @param  [in]  ifaceHandle   Interface handle.\n @param  [out] deviceInfos   Device info array to be filled.\n @param  [in]  bufferCount   Array size of deviceInfos.\n @param  [out] filledDeviceCount     Number of filled TY_DEVICE_BASE_INFO.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Invalid interface handle.\n @retval TY_STATUS_NULL_POINTER      deviceInfos or filledDeviceCount is NULL."]
    pub fn TYGetDeviceList(
        ifaceHandle: TY_INTERFACE_HANDLE,
        deviceInfos: *mut TY_DEVICE_BASE_INFO,
        bufferCount: u32,
        filledDeviceCount: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Check whether the interface has the specified device.\n @param  [in]  ifaceHandle   Interface handle.\n @param  [in]  deviceID      Device ID string, can be get from TY_DEVICE_BASE_INFO.\n @param  [out] value         True if the device exists.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Invalid interface handle.\n @retval TY_STATUS_NULL_POINTER      deviceID or value is NULL."]
    pub fn TYHasDevice(
        ifaceHandle: TY_INTERFACE_HANDLE,
        deviceID: *const ::std::os::raw::c_char,
        value: *mut bool,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Open device by device ID.\n @param  [in]  ifaceHandle   Interface handle.\n @param  [in]  deviceID      Device ID string, can be get from TY_DEVICE_BASE_INFO.\n @param  [out] deviceHandle  Handle of opened device. Valid only if TY_STATUS_OK or TY_FW_ERRORCODE returned.\n @param  [out] outFwErrorcode  Firmware errorcode. Valid only if TY_FW_ERRORCODE returned.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Invalid interface handle.\n @retval TY_STATUS_NULL_POINTER      deviceID or deviceHandle is NULL.\n @retval TY_STATUS_INVALID_PARAMETER Device not found.\n @retval TY_STATUS_BUSY              Device has been opened.\n @retval TY_STATUS_DEVICE_ERROR      Open device failed."]
    pub fn TYOpenDevice(
        ifaceHandle: TY_INTERFACE_HANDLE,
        deviceID: *const ::std::os::raw::c_char,
        outDeviceHandle: *mut TY_DEV_HANDLE,
        outFwErrorcode: *mut TY_FW_ERRORCODE,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Open device by device IP, useful when a device is not listed.\n @param  [in]  ifaceHandle   Interface handle.\n @param  [in]  IP            Device IP.\n @param  [out] deviceHandle  Handle of opened device.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Invalid interface handle.\n @retval TY_STATUS_NULL_POINTER      IP or deviceHandle is NULL.\n @retval TY_STATUS_INVALID_PARAMETER Device not found.\n @retval TY_STATUS_BUSY              Device has been opened, may occupied somewhere else.\n @retval TY_STATUS_DEVICE_ERROR      Open device failed."]
    pub fn TYOpenDeviceWithIP(
        ifaceHandle: TY_INTERFACE_HANDLE,
        IP: *const ::std::os::raw::c_char,
        deviceHandle: *mut TY_DEV_HANDLE,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get interface handle by device handle.\n @param  [in]  hDevice       Device handle.\n @param  [out] pIface        Interface handle.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      pIface is NULL."]
    pub fn TYGetDeviceInterface(
        hDevice: TY_DEV_HANDLE,
        pIface: *mut TY_INTERFACE_HANDLE,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Force a ethernet device to use new IP address, useful when device use persistent IP and cannot be found.\n @param  [in]  ifaceHandle   Interface handle.\n @param  [in]  MAC           Device MAC, should be \"xx:xx:xx:xx:xx:xx\".\n @param  [in]  newIP         New IP.\n @param  [in]  newNetMask    New subnet mask.\n @param  [in]  newGateway    New gateway.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        TYInitLib not called.\n @retval TY_STATUS_INVALID_INTERFACE Invalid interface handle.\n @retval TY_STATUS_WRONG_TYPE        Wrong interface type, should be network.\n @retval TY_STATUS_NULL_POINTER      MAC or newIP/newNetMask/newGateway is NULL.\n @retval TY_STATUS_INVALID_PARAMETER MAC is not valid.\n @retval TY_STATUS_TIMEOUT           No device found.\n @retval TY_STATUS_DEVICE_ERROR      Set new IP failed."]
    pub fn TYForceDeviceIP(
        ifaceHandle: TY_INTERFACE_HANDLE,
        MAC: *const ::std::os::raw::c_char,
        newIP: *const ::std::os::raw::c_char,
        newNetMask: *const ::std::os::raw::c_char,
        newGateway: *const ::std::os::raw::c_char,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Close device by device handle.\n @param  [in]  hDevice       Device handle.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_IDLE              Device has been closed."]
    pub fn TYCloseDevice(hDevice: TY_DEV_HANDLE, reboot: bool) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get base info of the open device.\n @param  [in]  hDevice       Device handle.\n @param  [out] info          Base info out.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      componentIDs is NULL."]
    pub fn TYGetDeviceInfo(hDevice: TY_DEV_HANDLE, info: *mut TY_DEVICE_BASE_INFO) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get all components IDs.\n @param  [in]  hDevice       Device handle.\n @param  [out] componentIDs  All component IDs this device has. (bit flag).\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      componentIDs is NULL.\n @see TY_DEVICE_COMPONENT_LIST"]
    pub fn TYGetComponentIDs(
        hDevice: TY_DEV_HANDLE,
        componentIDs: *mut TY_COMPONENT_ID,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get all enabled components IDs.\n @param  [in]  hDevice       Device handle.\n @param  [out] componentIDs  Enabled component IDs.(bit flag)\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      componentIDs is NULL.\n @see TY_DEVICE_COMPONENT_LIST"]
    pub fn TYGetEnabledComponents(
        hDevice: TY_DEV_HANDLE,
        componentIDs: *mut TY_COMPONENT_ID,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Enable components.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentIDs  Components to be enabled.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Some components specified by componentIDs are invalid.\n @retval TY_STATUS_BUSY      Device is capturing."]
    pub fn TYEnableComponents(hDevice: TY_DEV_HANDLE, componentIDs: TY_COMPONENT_ID) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Disable components.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentIDs  Components to be disabled.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Some components specified by componentIDs are invalid.\n @retval TY_STATUS_BUSY      Device is capturing.\n @see TY_DEVICE_COMPONENT_LIST"]
    pub fn TYDisableComponents(hDevice: TY_DEV_HANDLE, componentIDs: TY_COMPONENT_ID) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get total buffer size of one frame in current configuration.\n @param  [in]  hDevice       Device handle.\n @param  [out] bufferSize    Buffer size per frame.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      bufferSize is NULL."]
    pub fn TYGetFrameBufferSize(hDevice: TY_DEV_HANDLE, bufferSize: *mut u32) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Enqueue a user allocated buffer.\n @param  [in]  hDevice       Device handle.\n @param  [in]  buffer        Buffer to be enqueued.\n @param  [in]  bufferSize    Size of the input buffer.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      buffer is NULL.\n @retval TY_STATUS_WRONG_SIZE        The input buffer is not large enough."]
    pub fn TYEnqueueBuffer(
        hDevice: TY_DEV_HANDLE,
        buffer: *mut ::std::os::raw::c_void,
        bufferSize: u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Clear the internal buffer queue, so that user can release all the buffer.\n @param  [in]  hDevice       Device handle.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_BUSY      Device is capturing."]
    pub fn TYClearBufferQueue(hDevice: TY_DEV_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Start capture.\n @param  [in]  hDevice       Device handle.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT No components enabled.\n @retval TY_STATUS_BUSY              Device has been started.\n @retval TY_STATUS_DEVICE_ERROR      Start capture failed."]
    pub fn TYStartCapture(hDevice: TY_DEV_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Stop capture.\n @param  [in]  hDevice       Device handle.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_IDLE              Device is not capturing.\n @retval TY_STATUS_DEVICE_ERROR      Stop capture failed."]
    pub fn TYStopCapture(hDevice: TY_DEV_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Send a software trigger to capture a frame when device works in trigger mode.\n @param  [in]  hDevice       Device handle.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_FEATURE   Not support soft trigger.\n @retval TY_STATUS_IDLE              Device has not started capture.\n @retval TY_STATUS_WRONG_MODE        Not in trigger mode."]
    pub fn TYSendSoftTrigger(hDevice: TY_DEV_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Register device status callback. Register NULL to clean callback.\n @param  [in]  hDevice       Device handle.\n @param  [in]  callback      Callback function.\n @param  [in]  userdata      User private data.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_BUSY      Device is capturing."]
    pub fn TYRegisterEventCallback(
        hDevice: TY_DEV_HANDLE,
        callback: TY_EVENT_CALLBACK,
        userdata: *mut ::std::os::raw::c_void,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Register imu callback. Register NULL to clean callback.\n @param  [in]  hDevice       Device handle.\n @param  [in]  callback      Callback function.\n @param  [in]  userdata      User private data.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_BUSY      Device is capturing."]
    pub fn TYRegisterImuCallback(
        hDevice: TY_DEV_HANDLE,
        callback: TY_IMU_CALLBACK,
        userdata: *mut ::std::os::raw::c_void,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Fetch one frame.\n @param  [in]  hDevice       Device handle.\n @param  [out] frame         Frame data to be filled.\n @param  [in]  timeout       Timeout in milliseconds. <0 for infinite.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      frame is NULL.\n @retval TY_STATUS_IDLE              Device capturing is not started.\n @retval TY_STATUS_WRONG_MODE        Callback has been registered, this function is disabled.\n @retval TY_STATUS_TIMEOUT   Timeout."]
    pub fn TYFetchFrame(
        hDevice: TY_DEV_HANDLE,
        frame: *mut TY_FRAME_DATA,
        timeout: i32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Check  whether a component has a specific feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] value         Whether has feature.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_NULL_POINTER      value is NULL."]
    pub fn TYHasFeature(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: *mut bool,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get feature info.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] featureInfo   Feature info.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_NULL_POINTER      featureInfo is NULL."]
    pub fn TYGetFeatureInfo(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        featureInfo: *mut TY_FEATURE_INFO,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get value range of integer feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] intRange      Integer range to be filled.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_INT.\n @retval TY_STATUS_NULL_POINTER      intRange is NULL."]
    pub fn TYGetIntRange(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        intRange: *mut TY_INT_RANGE,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get value of integer feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] value         Integer value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_INT.\n @retval TY_STATUS_NULL_POINTER      value is NULL."]
    pub fn TYGetInt(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: *mut i32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Set value of integer feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [in]  value         Integer value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_INT.\n @retval TY_STATUS_OUT_OF_RANGE      value is out of range.\n @retval TY_STATUS_BUSY              Device is capturing, the feature is locked."]
    pub fn TYSetInt(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: i32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get value range of float feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] floatRange    Float range to be filled.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_FLOAT.\n @retval TY_STATUS_NULL_POINTER      floatRange is NULL."]
    pub fn TYGetFloatRange(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        floatRange: *mut TY_FLOAT_RANGE,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get value of float feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] value         Float value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_FLOAT.\n @retval TY_STATUS_NULL_POINTER      value is NULL."]
    pub fn TYGetFloat(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: *mut f32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Set value of float feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [in]  value         Float value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_FLOAT.\n @retval TY_STATUS_OUT_OF_RANGE      value is out of range.\n @retval TY_STATUS_BUSY              Device is capturing, the feature is locked."]
    pub fn TYSetFloat(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: f32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get number of enum entries.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] entryCount    Entry count.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_ENUM.\n @retval TY_STATUS_NULL_POINTER      entryCount is NULL."]
    pub fn TYGetEnumEntryCount(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        entryCount: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get list of enum entries.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] entries       Output entries.\n @param  [in]  entryCount    Array size of input parameter \"entries\".\n @param  [out] filledEntryCount      Number of filled entries.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_ENUM.\n @retval TY_STATUS_NULL_POINTER      entries or filledEntryCount is NULL."]
    pub fn TYGetEnumEntryInfo(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        entries: *mut TY_ENUM_ENTRY,
        entryCount: u32,
        filledEntryCount: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get current value of enum feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] value         Enum value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_ENUM.\n @retval TY_STATUS_NULL_POINTER      value is NULL."]
    pub fn TYGetEnum(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Set value of enum feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [in]  value         Enum value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_ENUM.\n @retval TY_STATUS_INVALID_PARAMETER value is invalid.\n @retval TY_STATUS_BUSY              Device is capturing, the feature is locked."]
    pub fn TYSetEnum(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get value of bool feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] value         Bool value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_BOOL.\n @retval TY_STATUS_NULL_POINTER      value is NULL."]
    pub fn TYGetBool(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: *mut bool,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Set value of bool feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [in]  value         Bool value.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_BOOL.\n @retval TY_STATUS_BUSY              Device is capturing, the feature is locked."]
    pub fn TYSetBool(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        value: bool,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get internal buffer size of string feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] size          String length including '\\0'.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_STRING.\n @retval TY_STATUS_NULL_POINTER      size is NULL.\n @see TYGetString"]
    pub fn TYGetStringLength(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        size: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get value of string feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] buffer        String buffer.\n @param  [in]  bufferSize    Size of buffer.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_STRING.\n @retval TY_STATUS_NULL_POINTER      buffer is NULL.\n @see TYGetStringLength"]
    pub fn TYGetString(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Set value of string feature.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [in]  buffer        String buffer.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_STRING.\n @retval TY_STATUS_NULL_POINTER      buffer is NULL.\n @retval TY_STATUS_OUT_OF_RANGE      Input string is too long.\n @retval TY_STATUS_BUSY              Device is capturing, the feature is locked."]
    pub fn TYSetString(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        buffer: *const ::std::os::raw::c_char,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get value of struct.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] pStruct       Pointer of struct.\n @param  [in]  structSize    Size of input buffer pStruct..\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_STRUCT.\n @retval TY_STATUS_NULL_POINTER      pStruct is NULL.\n @retval TY_STATUS_WRONG_SIZE        structSize incorrect."]
    pub fn TYGetStruct(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        pStruct: *mut ::std::os::raw::c_void,
        structSize: u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Set value of struct.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [in]  pStruct       Pointer of struct.\n @param  [in]  structSize    Size of struct.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_STRUCT.\n @retval TY_STATUS_NULL_POINTER      pStruct is NULL.\n @retval TY_STATUS_WRONG_SIZE        structSize incorrect.\n @retval TY_STATUS_BUSY              Device is capturing, the feature is locked."]
    pub fn TYSetStruct(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        pStruct: *mut ::std::os::raw::c_void,
        structSize: u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get the size of specified byte array zone .\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] pSize         size of specified byte array zone.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_BYTEARRAY.\n @retval TY_STATUS_NULL_POINTER      pSize is NULL."]
    pub fn TYGetByteArraySize(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        pSize: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get the size of device features .\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [out] pSize         size of all feature cnt.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_NULL_POINTER      pSize is NULL."]
    pub fn TYGetDeviceFeatureNumber(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        size: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get the all features by comp id.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [out] featureInfo   Output feature info.\n @param  [in]  entryCount    Array size of input parameter \"featureInfo\".\n @param  [out] filledEntryCount      Number of filled featureInfo.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_NULL_POINTER      featureInfo or filledEntryCount is NULL."]
    pub fn TYGetDeviceFeatureInfo(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureInfo: *mut TY_FEATURE_INFO,
        entryCount: u32,
        filledEntryCount: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get the Device xml size\n @param  [in]  hDevice       Device handle.\n @param  [out] size          The size of device xml string\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        Not call TYInitLib\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      size is NULL."]
    pub fn TYGetDeviceXMLSize(hDevice: TY_DEV_HANDLE, size: *mut u32) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Get the Device xml string\n @param  [in]  hDevice       Device handle.\n @param  [in]  xml           The buffer to store xml\n @param  [in]  in_size       The size buffer\n @param  [out] out_size      The actual size write in buffer\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NOT_INITED        Not call TYInitLib\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_NULL_POINTER      xml or out_size is NULL."]
    pub fn TYGetDeviceXML(
        hDevice: TY_DEV_HANDLE,
        xml: *mut ::std::os::raw::c_char,
        in_size: u32,
        out_size: *mut u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Read byte array from device.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] pbuffer       byte buffer.\n @param  [in]  bufferSize    Size of buffer.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_BYTEARRAY.\n @retval TY_STATUS_NULL_POINTER      pbuffer is NULL.\n @retval TY_STATUS_WRONG_SIZE        bufferSize incorrect."]
    pub fn TYGetByteArray(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        pBuffer: *mut u8,
        bufferSize: u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Write byte array to device.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] pbuffer       byte buffer.\n @param  [in]  bufferSize    Size of buffer.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_BYTEARRAY.\n @retval TY_STATUS_NULL_POINTER      pbuffer is NULL.\n @retval TY_STATUS_WRONG_SIZE        bufferSize incorrect.\n @retval TY_STATUS_BUSY              Device is capturing, the feature is locked."]
    pub fn TYSetByteArray(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        pBuffer: *const u8,
        bufferSize: u32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Write byte array to device.\n @param  [in]  hDevice       Device handle.\n @param  [in]  componentID   Component ID.\n @param  [in]  featureID     Feature ID.\n @param  [out] pAttr         byte array attribute to be filled.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_INVALID_HANDLE    Invalid device handle.\n @retval TY_STATUS_INVALID_COMPONENT Invalid component ID.\n @retval TY_STATUS_INVALID_FEATURE   Invalid feature ID.\n @retval TY_STATUS_NOT_PERMITTED     The feature is not writable.\n @retval TY_STATUS_WRONG_TYPE        The feature's type is not TY_FEATURE_BYTEARRAY.\n @retval TY_STATUS_NULL_POINTER      pbuffer is NULL."]
    pub fn TYGetByteArrayAttr(
        hDevice: TY_DEV_HANDLE,
        componentID: TY_COMPONENT_ID,
        featureID: TY_FEATURE_ID,
        pAttr: *mut TY_BYTEARRAY_ATTR,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn _TYInitLib() -> TY_STATUS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TY_PIXEL_DESC {
    pub x: i16,
    pub y: i16,
    pub depth: u16,
    pub rsvd: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_PIXEL_DESC"][::std::mem::size_of::<TY_PIXEL_DESC>() - 8usize];
    ["Alignment of TY_PIXEL_DESC"][::std::mem::align_of::<TY_PIXEL_DESC>() - 2usize];
    ["Offset of field: TY_PIXEL_DESC::x"][::std::mem::offset_of!(TY_PIXEL_DESC, x) - 0usize];
    ["Offset of field: TY_PIXEL_DESC::y"][::std::mem::offset_of!(TY_PIXEL_DESC, y) - 2usize];
    ["Offset of field: TY_PIXEL_DESC::depth"]
        [::std::mem::offset_of!(TY_PIXEL_DESC, depth) - 4usize];
    ["Offset of field: TY_PIXEL_DESC::rsvd"][::std::mem::offset_of!(TY_PIXEL_DESC, rsvd) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TY_PIXEL_COLOR_DESC {
    pub x: i16,
    pub y: i16,
    pub bgr_ch1: u8,
    pub bgr_ch2: u8,
    pub bgr_ch3: u8,
    pub rsvd: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_PIXEL_COLOR_DESC"][::std::mem::size_of::<TY_PIXEL_COLOR_DESC>() - 8usize];
    ["Alignment of TY_PIXEL_COLOR_DESC"][::std::mem::align_of::<TY_PIXEL_COLOR_DESC>() - 2usize];
    ["Offset of field: TY_PIXEL_COLOR_DESC::x"]
        [::std::mem::offset_of!(TY_PIXEL_COLOR_DESC, x) - 0usize];
    ["Offset of field: TY_PIXEL_COLOR_DESC::y"]
        [::std::mem::offset_of!(TY_PIXEL_COLOR_DESC, y) - 2usize];
    ["Offset of field: TY_PIXEL_COLOR_DESC::bgr_ch1"]
        [::std::mem::offset_of!(TY_PIXEL_COLOR_DESC, bgr_ch1) - 4usize];
    ["Offset of field: TY_PIXEL_COLOR_DESC::bgr_ch2"]
        [::std::mem::offset_of!(TY_PIXEL_COLOR_DESC, bgr_ch2) - 5usize];
    ["Offset of field: TY_PIXEL_COLOR_DESC::bgr_ch3"]
        [::std::mem::offset_of!(TY_PIXEL_COLOR_DESC, bgr_ch3) - 6usize];
    ["Offset of field: TY_PIXEL_COLOR_DESC::rsvd"]
        [::std::mem::offset_of!(TY_PIXEL_COLOR_DESC, rsvd) - 7usize];
};
unsafe extern "C" {
    #[doc = " @brief Calculate 4x4 extrinsic matrix's inverse matrix.\n @param  [in]  orgExtrinsic          Input extrinsic matrix.\n @param  [out] invExtrinsic          Inverse matrix.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_ERROR     Calculation failed."]
    pub fn TYInvertExtrinsic(
        orgExtrinsic: *const TY_CAMERA_EXTRINSIC,
        invExtrinsic: *mut TY_CAMERA_EXTRINSIC,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Map pixels on depth image to 3D points.\n @param  [in]  src_calib             Depth image's calibration data.\n @param  [in]  depthW                Width of depth image.\n @param  [in]  depthH                Height of depth image.\n @param  [in]  depthPixels           Pixels on depth image.\n @param  [in]  count                 Number of depth pixels.\n @param  [out] point3d               Output point3D.\n @retval TY_STATUS_OK        Succeed."]
    pub fn TYMapDepthToPoint3d(
        src_calib: *const TY_CAMERA_CALIB_INFO,
        depthW: u32,
        depthH: u32,
        depthPixels: *const TY_PIXEL_DESC,
        count: u32,
        point3d: *mut TY_VECT_3F,
        f_scale_unit: f32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Map 3D points to pixels on depth image. Reverse operation of TYMapDepthToPoint3d.\n @param  [in]  dst_calib             Target depth image's calibration data.\n @param  [in]  point3d               Input 3D points.\n @param  [in]  count                 Number of points.\n @param  [in]  depthW                Width of target depth image.\n @param  [in]  depthH                Height of target depth image.\n @param  [out] depth                 Output depth pixels.\n @retval TY_STATUS_OK        Succeed."]
    pub fn TYMapPoint3dToDepth(
        dst_calib: *const TY_CAMERA_CALIB_INFO,
        point3d: *const TY_VECT_3F,
        count: u32,
        depthW: u32,
        depthH: u32,
        depth: *mut TY_PIXEL_DESC,
        f_scale_unit: f32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Map depth image to 3D points. 0 depth pixels maps to (NAN, NAN, NAN).\n @param  [in]  src_calib             Depth image's calibration data.\n @param  [in]  depthW                Width of depth image.\n @param  [in]  depthH                Height of depth image.\n @param  [in]  depth                 Depth image.\n @param  [out] point3d               Output point3D image.\n @retval TY_STATUS_OK        Succeed."]
    pub fn TYMapDepthImageToPoint3d(
        src_calib: *const TY_CAMERA_CALIB_INFO,
        imageW: i32,
        imageH: i32,
        depth: *const u16,
        point3d: *mut TY_VECT_3F,
        f_scale_unit: f32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Fill depth image empty region.\n @param  [in]  depth                 Depth image pixels.\n @param  [in]  depthW                Width of current depth image.\n @param  [in]  depthH                Height of current depth image."]
    pub fn TYDepthImageFillEmptyRegion(depth: *mut u16, depthW: u32, depthH: u32) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Map 3D points to depth image. (NAN, NAN, NAN) will be skipped.\n @param  [in]  dst_calib             Target depth image's calibration data.\n @param  [in]  point3d               Input 3D points.\n @param  [in]  count                 Number of points.\n @param  [in]  depthW                Width of target depth image.\n @param  [in]  depthH                Height of target depth image.\n @param  [in,out] depth              Depth image buffer.\n @retval TY_STATUS_OK        Succeed."]
    pub fn TYMapPoint3dToDepthImage(
        dst_calib: *const TY_CAMERA_CALIB_INFO,
        point3d: *const TY_VECT_3F,
        count: u32,
        depthW: u32,
        depthH: u32,
        depth: *mut u16,
        f_target_scale: f32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Map 3D points to another coordinate.\n @param  [in]  extrinsic             Extrinsic matrix.\n @param  [in]  point3dFrom           Source 3D points.\n @param  [in]  count                 Number of source 3D points.\n @param  [out] point3dTo             Target 3D points.\n @retval TY_STATUS_OK        Succeed."]
    pub fn TYMapPoint3dToPoint3d(
        extrinsic: *const TY_CAMERA_EXTRINSIC,
        point3dFrom: *const TY_VECT_3F,
        count: i32,
        point3dTo: *mut TY_VECT_3F,
    ) -> TY_STATUS;
}
pub type TY_ISP_HANDLE = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_ISP_FEATURE_ID {
    TY_ISP_FEATURE_CAM_MODEL = 0,
    #[doc = "<device handle for device control"]
    TY_ISP_FEATURE_CAM_DEV_HANDLE = 1,
    #[doc = "<the component to control"]
    TY_ISP_FEATURE_CAM_DEV_COMPONENT = 2,
    #[doc = "<image size width&height"]
    TY_ISP_FEATURE_IMAGE_SIZE = 256,
    TY_ISP_FEATURE_WHITEBALANCE_GAIN = 512,
    TY_ISP_FEATURE_ENABLE_AUTO_WHITEBALANCE = 768,
    TY_ISP_FEATURE_SHADING = 1024,
    TY_ISP_FEATURE_SHADING_CENTER = 1280,
    #[doc = "<global black level"]
    TY_ISP_FEATURE_BLACK_LEVEL = 1536,
    #[doc = "<to set different black level for each image column"]
    TY_ISP_FEATURE_BLACK_LEVEL_COLUMN = 1552,
    #[doc = "<global pixel gain"]
    TY_ISP_FEATURE_BLACK_LEVEL_GAIN = 1792,
    #[doc = "<to set different gain for each image column"]
    TY_ISP_FEATURE_BLACK_LEVEL_GAIN_COLUMN = 1808,
    TY_ISP_FEATURE_BAYER_PATTERN = 2048,
    TY_ISP_FEATURE_DEMOSAIC_METHOD = 2304,
    TY_ISP_FEATURE_GAMMA = 2560,
    TY_ISP_FEATURE_DEFECT_PIXEL_LIST = 2816,
    TY_ISP_FEATURE_CCM = 3072,
    #[doc = "<ENABLE CCM"]
    TY_ISP_FEATURE_CCM_ENABLE = 3088,
    TY_ISP_FEATURE_BRIGHT = 3328,
    TY_ISP_FEATURE_CONTRAST = 3584,
    TY_ISP_FEATURE_AUTOBRIGHT = 3840,
    TY_ISP_FEATURE_INPUT_RESAMPLE_SCALE = 4096,
    TY_ISP_FEATURE_ENABLE_AUTO_EXPOSURE_GAIN = 4352,
    #[doc = "<exposure range ,default no limit"]
    TY_ISP_FEATURE_AUTO_EXPOSURE_RANGE = 4608,
    #[doc = "<gain range ,default no limit"]
    TY_ISP_FEATURE_AUTO_GAIN_RANGE = 4864,
    #[doc = "<update device exposure interval , default 5 frame"]
    TY_ISP_FEATURE_AUTO_EXPOSURE_UPDATE_INTERVAL = 5120,
    #[doc = "<display detail log information"]
    TY_ISP_FEATURE_DEBUG_LOG = 4278190080,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_ISP_BAYER_PATTERN {
    TY_ISP_BAYER_GB = 0,
    TY_ISP_BAYER_BG = 1,
    TY_ISP_BAYER_RG = 2,
    TY_ISP_BAYER_GR = 3,
    TY_ISP_BAYER_AUTO = 255,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TY_DEMOSAIC_METHOD {
    TY_DEMOSAIC_METHOD_SIMPLE = 0,
    TY_DEMOSAIC_METHOD_BILINEAR = 1,
    TY_DEMOSAIC_METHOD_HQLINEAR = 2,
    TY_DEMOSAIC_METHOD_EDGESENSE = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TY_ISP_FEATURE_INFO {
    pub id: TY_ISP_FEATURE_ID,
    pub size: i32,
    pub name: *const ::std::os::raw::c_char,
    pub value_type: *const ::std::os::raw::c_char,
    pub mode: TY_ACCESS_MODE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TY_ISP_FEATURE_INFO"][::std::mem::size_of::<TY_ISP_FEATURE_INFO>() - 32usize];
    ["Alignment of TY_ISP_FEATURE_INFO"][::std::mem::align_of::<TY_ISP_FEATURE_INFO>() - 8usize];
    ["Offset of field: TY_ISP_FEATURE_INFO::id"]
        [::std::mem::offset_of!(TY_ISP_FEATURE_INFO, id) - 0usize];
    ["Offset of field: TY_ISP_FEATURE_INFO::size"]
        [::std::mem::offset_of!(TY_ISP_FEATURE_INFO, size) - 4usize];
    ["Offset of field: TY_ISP_FEATURE_INFO::name"]
        [::std::mem::offset_of!(TY_ISP_FEATURE_INFO, name) - 8usize];
    ["Offset of field: TY_ISP_FEATURE_INFO::value_type"]
        [::std::mem::offset_of!(TY_ISP_FEATURE_INFO, value_type) - 16usize];
    ["Offset of field: TY_ISP_FEATURE_INFO::mode"]
        [::std::mem::offset_of!(TY_ISP_FEATURE_INFO, mode) - 24usize];
};
unsafe extern "C" {
    pub fn TYISPCreate(handle: *mut TY_ISP_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPRelease(handle: *mut TY_ISP_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPLoadConfig(handle: TY_ISP_HANDLE, config: *const u8, config_size: u32)
        -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = "@breif called by main thread to update & control device status for ISP"]
    pub fn TYISPUpdateDevice(handle: TY_ISP_HANDLE) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPSetFeature(
        handle: TY_ISP_HANDLE,
        feature_id: TY_ISP_FEATURE_ID,
        data: *const u8,
        size: i32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPGetFeature(
        handle: TY_ISP_HANDLE,
        feature_id: TY_ISP_FEATURE_ID,
        data_buff: *mut u8,
        buff_size: i32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPGetFeatureSize(
        handle: TY_ISP_HANDLE,
        feature_id: TY_ISP_FEATURE_ID,
        size: *mut i32,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPHasFeature(handle: TY_ISP_HANDLE, feature_id: TY_ISP_FEATURE_ID) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPGetFeatureInfoList(
        handle: TY_ISP_HANDLE,
        info_buffer: *mut TY_ISP_FEATURE_INFO,
        buffer_size: ::std::os::raw::c_int,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    pub fn TYISPGetFeatureInfoListSize(handle: TY_ISP_HANDLE, buffer_size: *mut i32) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = "@breif  convert bayer raw image to rgb image,output buffer is allocated by invoker"]
    pub fn TYISPProcessImage(
        handle: TY_ISP_HANDLE,
        image_bayer: *const TY_IMAGE_DATA,
        image_out: *mut TY_IMAGE_DATA,
    ) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Image processing acceleration switch\n @param  [in] en          Enable image process acceleration switch"]
    pub fn TYImageProcesAcceEnable(en: bool) -> TY_STATUS;
}
unsafe extern "C" {
    #[doc = " @brief Do image undistortion, only support TY_PIXEL_FORMAT_MONO ,TY_PIXEL_FORMAT_RGB,TY_PIXEL_FORMAT_BGR.\n @param  [in]  srcCalibInfo          Image calibration data.\n @param  [in]  srcImage              Source image.\n @param  [in]  cameraNewIntrinsic    Expected new image intrinsic, will use srcCalibInfo for new image intrinsic if set to NULL.\n @param  [out] dstImage              Output image.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NULL_POINTER      Any srcCalibInfo, srcImage, dstImage, srcImage->buffer, dstImage->buffer is NULL.\n @retval TY_STATUS_INVALID_PARAMETER Invalid srcImage->width, srcImage->height, dstImage->width, dstImage->height or unsupported pixel format."]
    pub fn TYUndistortImage(
        srcCalibInfo: *const TY_CAMERA_CALIB_INFO,
        srcImage: *const TY_IMAGE_DATA,
        cameraNewIntrinsic: *const TY_CAMERA_INTRINSIC,
        dstImage: *mut TY_IMAGE_DATA,
    ) -> TY_STATUS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DepthSpeckleFilterParameters {
    pub max_speckle_size: ::std::os::raw::c_int,
    pub max_speckle_diff: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DepthSpeckleFilterParameters"]
        [::std::mem::size_of::<DepthSpeckleFilterParameters>() - 8usize];
    ["Alignment of DepthSpeckleFilterParameters"]
        [::std::mem::align_of::<DepthSpeckleFilterParameters>() - 4usize];
    ["Offset of field: DepthSpeckleFilterParameters::max_speckle_size"]
        [::std::mem::offset_of!(DepthSpeckleFilterParameters, max_speckle_size) - 0usize];
    ["Offset of field: DepthSpeckleFilterParameters::max_speckle_diff"]
        [::std::mem::offset_of!(DepthSpeckleFilterParameters, max_speckle_diff) - 4usize];
};
unsafe extern "C" {
    #[doc = " @brief Remove speckles on depth image.\n @param  [in,out]  depthImage        Depth image to be processed.\n @param  [in]  param                 Algorithm parameters.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NULL_POINTER      Any depth, param or depth->buffer is NULL.\n @retval TY_STATUS_INVALID_PARAMETER param->max_speckle_size <= 0 or param->max_speckle_diff <= 0"]
    pub fn TYDepthSpeckleFilter(
        depthImage: *mut TY_IMAGE_DATA,
        param: *const DepthSpeckleFilterParameters,
    ) -> TY_STATUS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DepthEnhenceParameters {
    #[doc = "< filter param on space"]
    pub sigma_s: f32,
    #[doc = "< filter param on range"]
    pub sigma_r: f32,
    #[doc = "< outlier filter windows ize"]
    pub outlier_win_sz: ::std::os::raw::c_int,
    pub outlier_rate: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DepthEnhenceParameters"][::std::mem::size_of::<DepthEnhenceParameters>() - 16usize];
    ["Alignment of DepthEnhenceParameters"]
        [::std::mem::align_of::<DepthEnhenceParameters>() - 4usize];
    ["Offset of field: DepthEnhenceParameters::sigma_s"]
        [::std::mem::offset_of!(DepthEnhenceParameters, sigma_s) - 0usize];
    ["Offset of field: DepthEnhenceParameters::sigma_r"]
        [::std::mem::offset_of!(DepthEnhenceParameters, sigma_r) - 4usize];
    ["Offset of field: DepthEnhenceParameters::outlier_win_sz"]
        [::std::mem::offset_of!(DepthEnhenceParameters, outlier_win_sz) - 8usize];
    ["Offset of field: DepthEnhenceParameters::outlier_rate"]
        [::std::mem::offset_of!(DepthEnhenceParameters, outlier_rate) - 12usize];
};
unsafe extern "C" {
    #[doc = " @brief Remove speckles on depth image.\n @param  [in]  depthImage            Pointer to depth image array.\n @param  [in]  imageNum              Depth image array size.\n @param  [in,out]  guide             Guide image.\n @param  [out] output                Output depth image.\n @param  [in]  param                 Algorithm parameters.\n @retval TY_STATUS_OK        Succeed.\n @retval TY_STATUS_NULL_POINTER      Any depthImage, param, output or output->buffer is NULL.\n @retval TY_STATUS_INVALID_PARAMETER imageNum >= 11 or imageNum <= 0, or any image invalid\n @retval TY_STATUS_OUT_OF_MEMORY     Output image not suitable."]
    pub fn TYDepthEnhenceFilter(
        depthImages: *const TY_IMAGE_DATA,
        imageNum: ::std::os::raw::c_int,
        guide: *mut TY_IMAGE_DATA,
        output: *mut TY_IMAGE_DATA,
        param: *const DepthEnhenceParameters,
    ) -> TY_STATUS;
}
